{
  "swagger": "2.0",
  "info": {
    "description": "Explore the cable APIs. APIs are grouped by Domain.",
    "version": "0.0.1",
    "title": "Cable API"
  },
  "host": "cable-api.herokuapp.com",
  "basePath": "/api-docs",
  "paths": {
    "/ticket/{t-id}/statusentry/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find resource by ID",
        "description": "An entry that documents the Lifecycle of a given Ticket.",
        "displayName": "Status Entry",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance whose status needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatusEntry"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance whose status needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StatusEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatusEntry"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance whose status needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/statusentry": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find list of status entries for a ticket.",
        "description": "A status entry to the log of an Ticket.",
        "displayName": "Status Entry Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StatusEntryList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to add status entry",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StatusEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/contact": {
      "post": {
        "tags": [
          "Common"
        ],
        "summary": "Create a contact.",
        "description": "Contact is a PartyRole for a Party that acts as a specific type of contact, such as a billing contact.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/contact/{id}": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "Find a contact by ID.",
        "description": "Contact is a PartyRole for a Party that acts as a specific type of contact, such as a billing contact.",
        "displayName": "Contact ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Common"
        ],
        "summary": "Update an existing contact.",
        "description": "Contact is a PartyRole for a Party that acts as a specific type of contact, such as a billing contact.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Common"
        ],
        "summary": "Delete a contact based on ID.",
        "description": "Contact is a PartyRole for a Party that acts as a specific type of contact, such as a billing contact.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/cmts": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CMTS"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/cmts/{id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Find resource by ID",
        "description": "Cable Modem Termination System.  Device that CableModems 'talk' to via Channels.",
        "displayName": "CMTS",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CMTS"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Resource"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CMTS"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CMTS"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Resource"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },


    "/geometrycollection": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeometryCollection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/geometrycollection/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry collection object. A GeoJSON object with type \"GeometryCollection\" is a geometry object which represents a collection of geometry objects. A geometry collection must have a member with the name \"geometries\". The value corresponding to \"geometries\"is an array. Each element in this array is a GeoJSON geometry object.",
        "displayName": "Geometry Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GeometryCollection"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeometryCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GeometryCollection"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/multipolygon": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiPolygon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/multipolygon/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry multi polygon object. For type \"MultiPolygon\", the \"coordinates\" member must be an array of Polygon coordinate arrays.",
        "displayName": "Multi Polygon",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultiPolygon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiPolygon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultiPolygon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/polygon": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Polygon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/polygon/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry polygon object. For type \"Polygon\", the \"coordinates\" member must be an array of LinearRing coordinate arrays. For Polygons with multiple rings, the first must be the exterior ring and any others must be interior rings or holes.",
        "displayName": "Polygon",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Polygon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Polygon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Polygon"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/multilinestring": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiLineString"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/multilinestring/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry multi linestring object. For type \"MultiLineString\", the \"coordinates\" member must be an array of LineString coordinate arrays.",
        "displayName": "Multi Line String",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultiLineString"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiLineString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultiLineString"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/linestring": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LineString"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/linestring/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry linestring object. Geo Json Spec: For type \"LineString\", the \"coordinates\" member must be an array of two or more positions. A LinearRing is closed LineString with 4 or more positions. The first and last positions are equivalent (they represent equivalent points). Though a LinearRing is not explicitly represented as a GeoJSON geometry type, it is referred to in the Polygon geometry type definition.",
        "displayName": "Line String",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LineString"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LineString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LineString"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/multipoint": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Point"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/multipoint/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry multi point object. Geo Json Spec : For type \"MultiPoint\", the \"coordinates\" member must be an array of positions.",
        "displayName": "Multi Point",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultiPoint"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiPoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MultiPoint"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/point": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Point"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/point/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A geometry point object. Geo Json Spec : For type \"Point\", the \"coordinates\" member must be a single position.",
        "displayName": "Point",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Point"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Point"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Point"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/sitelist": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiteList"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/sitelist/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A collection of Site instances.",
        "displayName": "Site List",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SiteList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiteList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SiteList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ack": {
      "post": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ACK"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ack/{id}": {
      "get": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Find resource by ID",
        "description": "Message that indicates the status of communications received.",
        "displayName": "ACK",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ACK"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ACK"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ACK"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new order.",
        "description": "An Order represents an order that would typically originate at an end user.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find an order by ID.",
        "description": "An Order represents an order that would typically originate at an end user.",
        "displayName": "Order",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing order.",
        "description": "An Order represents an order that would typically originate at an end user.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete an order based on ID.",
        "description": "An Order represents an order that would typically originate at an end user.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/usercredential": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a user credential.",
        "description": "UserCredential is a combination of user ID and password used to authenticate a user for account management or access to provider services.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/usercredential/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a user credential by ID.",
        "description": "UserCredential is a combination of user ID and password used to authenticate a user for account management or access to provider services.",
        "displayName": "User  Credential",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserCredential"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing user credential.",
        "description": "UserCredential is a combination of user ID and password used to authenticate a user for account management or access to provider services.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCredential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserCredential"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a user credential based on ID.",
        "description": "UserCredential is a combination of user ID and password used to authenticate a user for account management or access to provider services.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/billcharge": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a BillCharge.",
        "description": "A BillCharge is a charge or a credit assigned to a customer's account during the billing process.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillCharge"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/billcharge/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a BillCharge by ID.",
        "description": "A BillCharge is a charge or a credit assigned to a customer's account during the billing process.",
        "displayName": "Bill  Charge",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BillCharge"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing BillCharge.",
        "description": "A BillCharge is a charge or a credit assigned to a customer's account during the billing process.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill Charge"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Bill Charge"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a BillCharge based on ID.",
        "description": "A BillCharge is a charge or a credit assigned to a customer's account during the billing process.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/serviceorderitem": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a ServiceOrderItem.",
        "description": "A ServiceOrderItem is a specific item within a ServiceOrder and is expressed in terms of a ServiceSpecification or a Service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrderItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/serviceorderitem/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a ServiceOrderItem by ID.",
        "description": "A ServiceOrderItem is a specific item within a ServiceOrder and is expressed in terms of a ServiceSpecification or a Service.",
        "displayName": "Service  Order Item",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceOrderItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing ServiceOrderItem.",
        "description": "A ServiceOrderItem is a specific item within a ServiceOrder and is expressed in terms of a ServiceSpecification or a Service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrderItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceOrderItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a ServiceOrderItem based on ID.",
        "description": "A ServiceOrderItem is a specific item within a ServiceOrder and is expressed in terms of a ServiceSpecification or a Service.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/port": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/port/{id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Find resource by ID",
        "description": "The Port is a type of ResourceElement that consists only of logical termination points (TrailTerminationPointSource, TrailTerminationPointSink, and TrailTerminationPointBiDirectional, to be precise) and PhysicalPorts. This enables the Port to take on the physical and logical characteristics of a 'port' as defined in G.805. ",
        "displayName": "Resource Port",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Resource"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Port"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Resource"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/product/epl": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create an Ethernet Private Line (EPL) product.",
        "description": "A Product for Ethernet Private Line (EPL). EPL provides a point-to-point ethernet virtual connection (EVC) between a pair of dedicated user network interfaces (UNIs).",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EPLProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/product/epl/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find an Ethernet Private Line (EPL) product by ID.",
        "description": "A Product for Ethernet Private Line (EPL). EPL provides a point-to-point ethernet virtual connection (EVC) between a pair of dedicated user network interfaces (UNIs).",
        "displayName": "EPL Product",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EPLProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing Ethernet Private Line (EPL) product.",
        "description": "A Product for Ethernet Private Line (EPL). EPL provides a point-to-point ethernet virtual connection (EVC) between a pair of dedicated user network interfaces (UNIs).",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EPL Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EPL Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete an Ethernet Private Line (EPL) product based on ID.",
        "description": "A Product for Ethernet Private Line (EPL). EPL provides a point-to-point ethernet virtual connection (EVC) between a pair of dedicated user network interfaces (UNIs).",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/faxnumber": {
      "post": {
        "tags": [
          "Common"
        ],
        "summary": "Create a fax number for a PartyRole.",
        "description": "FaxNumber is the fax number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaxNumber"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/faxnumber/{id}": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "Find a fax number for a PartyRole by ID.",
        "description": "FaxNumber is the fax number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "displayName": "Fax Number",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FaxNumber"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Common"
        ],
        "summary": "Update an existing fax number for a PartyRole.",
        "description": "FaxNumber is the fax number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaxNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FaxNumber"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Common"
        ],
        "summary": "Delete a fax number based on ID.",
        "description": "FaxNumber is the fax number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/order/{id}/orderitem": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new OrderItem.",
        "description": "An OrderItem is one item in an order and is expressed in terms of a Product Offering or a Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the Order instance",
            "required": true,
            "default": "case3_final",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/order/{po-id}/orderitem/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find an OrderItem by ID.",
        "description": "An OrderItem is one item in an order and is expressed in terms of a Product Offering or a Product.",
        "displayName": "Product OrderItem",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "po-id",
            "description": "ID of the Order instance",
            "required": true,
            "default": "case3_final",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing OrderItem.",
        "description": "An OrderItem is one item in an order and is expressed in terms of a Product Offering or a Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "po-id",
            "description": "ID of the Order instance",
            "required": true,
            "default": "case3_final",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete an OrderItem based on ID.",
        "description": "An OrderItem is one item in an order and is expressed in terms of a Product Offering or a Product.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "po-id",
            "description": "ID of the Order instance",
            "required": true,
            "default": "case3_final",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customerbillspec": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a CustomerBillSpec.",
        "description": "A CustomerBillSpec is a detailed description of a customer's bill structure.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerBillSpec"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customerbillspec/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a CustomerBillSpec by ID.",
        "description": "A CustomerBillSpec is a detailed description of a customer's bill structure.",
        "displayName": "Customer BillSpec",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerBillSpec"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing CustomerBillSpec.",
        "description": "A CustomerBillSpec is a detailed description of a customer's bill structure.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerBillSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerBillSpec"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a CustomerBillSpec based on ID.",
        "description": "A CustomerBillSpec is a detailed description of a customer's bill structure.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{id}/assignedgroup": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a Ticket-AssignedGroup.",
        "description": "A Ticket-AssignedGroup is a group assigned to a Ticket, such as a particular organization (e.g., Network Services).",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignedGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a Ticket-AssignedGroup by ID.",
        "description": "A Ticket-AssignedGroup is a group assigned to a Ticket, such as a particular organization (e.g., Network Services).",
        "displayName": "Ticket AssignedGroup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AssignedGroup"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing Ticket-AssignedGroup.",
        "description": "A Ticket-AssignedGroup is a group assigned to a Ticket, such as a particular organization (e.g., Network Services).",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignedGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AssignedGroup"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a Ticket-AssignedGroup based on ID.",
        "description": "A Ticket-AssignedGroup is a group assigned to a Ticket, such as a particular organization (e.g., Network Services).",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/service": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/service/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
        "displayName": "Service ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/resourceorder": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a ResourceOrder.",
        "description": "A ResourceOrder lists the resources needed to provision the services in a ServiceOrder.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/resourceorder/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a ResourceOrder by ID.",
        "description": "A ResourceOrder lists the resources needed to provision the services in a ServiceOrder.",
        "displayName": "Resource Order",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing ResourceOrder.",
        "description": "A ResourceOrder lists the resources needed to provision the services in a ServiceOrder.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a ResourceOrder based on ID.",
        "description": "A ResourceOrder lists the resources needed to provision the services in a ServiceOrder.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/paymentitem": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a PaymentItem.",
        "description": "A PaymentItem is the application of a CustomerPayment.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/paymentitem/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a PaymentItem by ID.",
        "description": "A PaymentItem is the application of a CustomerPayment.",
        "displayName": "Payment Item",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing PaymentItem.",
        "description": "A PaymentItem is the application of a CustomerPayment.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a PaymentItem based on ID.",
        "description": "A PaymentItem is the application of a CustomerPayment.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/document": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a Document.",
        "description": "A Document refers to a physical document such as a contract, manual, or e-mail.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/document/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a Document by ID.",
        "description": "A Document refers to a physical document such as a contract, manual, or e-mail.",
        "displayName": "Document ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing Document.",
        "description": "A Document refers to a physical document such as a contract, manual, or e-mail.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a Document based on ID.",
        "description": "A Document refers to a physical document such as a contract, manual, or e-mail.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/preference": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a preference.",
        "description": "A Preference is a favored interaction in a particular area of control, such as parental restriction or e-mail marketing, for a specific PartyRole, Resource, CustomerAccount, or Service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Preference"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/preference/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a preference by ID.",
        "description": "A Preference is a favored interaction in a particular area of control, such as parental restriction or e-mail marketing, for a specific PartyRole, Resource, CustomerAccount, or Service.",
        "displayName": "Preference ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Preference"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing preference.",
        "description": "A Preference is a favored interaction in a particular area of control, such as parental restriction or e-mail marketing, for a specific PartyRole, Resource, CustomerAccount, or Service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Preference"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Preference"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a preference based on ID.",
        "description": "A Preference is a favored interaction in a particular area of control, such as parental restriction or e-mail marketing, for a specific PartyRole, Resource, CustomerAccount, or Service.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/servicespecification": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/servicespecification/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "A ServiceSpecification defines the invariant characteristics of a Service. It can be conceptually thought of as a template that different Service instances can be instantiated from.",
        "displayName": "Service Specification",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/card": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/card/{id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Find resource by ID",
        "description": "This class represents a type of physical container that can be plugged into a Slot. It may represent a primary function (e.g., a networking card) or an auxiliary function (e.g., a memory card) that supports another card. All objects of this type are capable of carrying electrical and/or optical signals. They also provide a mounting point for other types of ManagedePhysicalElements, such as Chips or Cards.",
        "displayName": "Card ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Resource"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Resource"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/orderdesign": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create an OrderDesign.",
        "description": "An OrderDesign is a change to an order from the as-built order.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderDesign"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/orderdesign/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find an OrderDesign by ID.",
        "description": "An OrderDesign is a change to an order from the as-built order.",
        "displayName": "Order Design",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderDesign"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing OrderDesign.",
        "description": "An OrderDesign is a change to an order from the as-built order.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderDesign"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderDesign"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete an OrderDesign based on ID.",
        "description": "An OrderDesign is a change to an order from the as-built order.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a Ticket.",
        "description": "A Ticket is a record containing the details of a single incident such as an interruption to a service or failure of a resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a Ticket by ID.",
        "description": "A Ticket is a record containing the details of a single incident such as an interruption to a service or failure of a resource.",
        "displayName": "Ticket",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing Ticket.",
        "description": "A Ticket is a record containing the details of a single incident such as an interruption to a service or failure of a resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a Ticket based on ID.",
        "description": "A Ticket is a record containing the details of a single incident such as an interruption to a service or failure of a resource.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/paymentmethod": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a payment method.",
        "description": "PaymentMethod is the way in which a customer provides payment, such as by cash, credit, or transfer.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/paymentmethod/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a payment method by ID.",
        "description": "PaymentMethod is the way in which a customer provides payment, such as by cash, credit, or transfer.",
        "displayName": "Payment Method",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing payment method.",
        "description": "PaymentMethod is the way in which a customer provides payment, such as by cash, credit, or transfer.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a payment method based on ID.",
        "description": "PaymentMethod is the way in which a customer provides payment, such as by cash, credit, or transfer.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customer": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a customer.",
        "description": "A person or organization that buys products and services from the service provider. A Customer is a Party playing a PartyRole.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a customer by ID.",
        "description": "A person or organization that buys products and services from the service provider. A Customer is a Party playing a PartyRole.",
        "displayName": "Customer ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing customer.",
        "description": "A person or organization that buys products and services from the service provider. A Customer is a Party playing a PartyRole.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a customer based on ID.",
        "description": "A person or organization that buys products and services from the service provider. A Customer is a Party playing a PartyRole.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/servicerole": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a ServiceRole.",
        "description": "A ServiceRole defines a Service in terms of a set of roles that characterize the functionality of the Service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRole"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/servicerole/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a ServiceRole by ID.",
        "description": "A ServiceRole defines a Service in terms of a set of roles that characterize the functionality of the Service.",
        "displayName": "Service Role",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceRole"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing ServiceRole.",
        "description": "A ServiceRole defines a Service in terms of a set of roles that characterize the functionality of the Service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceRole"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a ServiceRole based on ID.",
        "description": "A ServiceRole defines a Service in terms of a set of roles that characterize the functionality of the Service.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/service/evc": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EVCService"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/service/evc/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "An association of two or more UNIs (The physical point in a 'network' that defines the demarcation between the responsibility of a Service Provider and the responsibility of a Subscriber) across one or more Metro Ethernet Networks.",
        "displayName": "EVC Service",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EVCService"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EVCService"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EVCService"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/category": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new Ticket-Category.",
        "description": "A Ticket-Category is a category of tickets.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of instance ticket instance to add category",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/category/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a Ticket-Category by ID.",
        "description": "A Ticket-Category is a category of tickets.",
        "displayName": "Ticket Category",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance whose category needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing Ticket-Category.",
        "description": "A Ticket-Category is a category of tickets.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance whose status needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a Ticket-Category based on ID.",
        "description": "A Ticket-Category is a category of tickets.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance whose status needs to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/cablemodem": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CableModem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/cablemodem/{id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Find resource by ID",
        "description": "A cable modem is a type of network device that provides bi-directional data communication via radio frequency channels on a hybrid fibre-coaxial (HFC) and RFoG infrastructure. Cable modems are primarily used to deliver broadband Internet access in the form of cable Internet, taking advantage of the high bandwidth of a HFC and RFoG network.",
        "displayName": "Cable Modem",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CableModem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Resource"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CableModem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CableModem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Resource"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/productspecification": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a ProductSpecification.",
        "description": "A ProductSpecification is a technical blueprint for a set of Products, defining their common portions. It specifies the invariant characteristics of a Product and describes it independently of the current existence of any instance of that Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/productspecification/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a ProductSpecification by ID.",
        "description": "A ProductSpecification is a technical blueprint for a set of Products, defining their common portions. It specifies the invariant characteristics of a Product and describes it independently of the current existence of any instance of that Product.",
        "displayName": "Product  Specification",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing ProductSpecification.",
        "description": "A ProductSpecification is a technical blueprint for a set of Products, defining their common portions. It specifies the invariant characteristics of a Product and describes it independently of the current existence of any instance of that Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a ProductSpecification based on ID.",
        "description": "A ProductSpecification is a technical blueprint for a set of Products, defining their common portions. It specifies the invariant characteristics of a Product and describes it independently of the current existence of any instance of that Product.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/externalsystemreference": {
      "post": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalSystemReference"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/externalsystemreference/{id}": {
      "get": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Find resource by ID",
        "description": "Entity used to provide reference to an external system.",
        "displayName": "External SystemReference",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExternalSystemReference"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalSystemReference"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExternalSystemReference"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/featurecollection": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeatureCollection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/featurecollection/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "Lists of geometries are represented by a GeometryCollection. Geometries with additional properties are Feature objects. And lists of features are represented by a FeatureCollection.",
        "displayName": "Feature Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FeatureCollection"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeatureCollection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FeatureCollection"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a user.",
        "description": "A user is a single person or organization that uses products and services. User is a type of PartyRole.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a user by ID.",
        "description": "A user is a single person or organization that uses products and services. User is a type of PartyRole.",
        "displayName": "User ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing user.",
        "description": "A user is a single person or organization that uses products and services. User is a type of PartyRole.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a user based on ID.",
        "description": "A user is a single person or organization that uses products and services. User is a type of PartyRole.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/usergroup": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a user group.",
        "description": "UserGroup is a collection of users. It is a type of PartyRole and can be used independently of the User entity.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/usergroup/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a user group by ID.",
        "description": "UserGroup is a collection of users. It is a type of PartyRole and can be used independently of the User entity.",
        "displayName": "User Group",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing user group.",
        "description": "UserGroup is a collection of users. It is a type of PartyRole and can be used independently of the User entity.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a user group based on ID.",
        "description": "UserGroup is a collection of users. It is a type of PartyRole and can be used independently of the User entity.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/individual": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create an individual.",
        "description": "An Individual is a single person. Individual is a type of Party.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Individual"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/individual/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find an individual by ID.",
        "description": "An Individual is a single person. Individual is a type of Party.",
        "displayName": "Individual ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Individual"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing individual.",
        "description": "An Individual is a single person. Individual is a type of Party.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Individual"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Individual"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete an individual based on ID.",
        "description": "An Individual is a single person. Individual is a type of Party.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/organization": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create an organization.",
        "description": "An Organization is a group of people identified by shared interests or purpose, such as a business or a department within a business. Organization is a type of Party.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find an organization by ID.",
        "description": "An Organization is a group of people identified by shared interests or purpose, such as a business or a department within a business. Organization is a type of Party.",
        "displayName": "Organization ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing organization.",
        "description": "An Organization is a group of people identified by shared interests or purpose, such as a business or a department within a business. Organization is a type of Party.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete an organization based on ID.",
        "description": "An Organization is a group of people identified by shared interests or purpose, such as a business or a department within a business. Organization is a type of Party.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/postalcontact": {
      "post": {
        "tags": [
          "Common"
        ],
        "summary": "Create a postal contact for a PartyRole.",
        "description": "PostalContact is the postal information to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostalContact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/postalcontact/{id}": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "Find a postal contact for a PartyRole by ID.",
        "description": "PostalContact is the postal information to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "displayName": "Postal Contact",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostalContact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Common"
        ],
        "summary": "Update an existing postal contact for a PartyRole.",
        "description": "PostalContact is the postal information to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostalContact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PostalContact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Common"
        ],
        "summary": "Delete a postal contact based on ID.",
        "description": "PostalContact is the postal information to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/device": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/device/{id}": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Find resource by ID",
        "description": "A piece of equipment that provides functionality or is used to access services from the provider (e.g. mobile phone, tablet, gateway, etc.).",
        "displayName": "Device ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Resource"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Resource"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/product/evc": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create an Ethernet Virtual Connection (EVC) product.",
        "description": "A Product for an Ethernet Virtual Connection (EVC). EVC is an association between two or more user network interfaces that identifies a point-to-point or multipoint-to-multipoint path within the service provider network. Each endpoint of an EVC is defined as a user-to-network interface (UNI). There are three types of EVCs: point-to-point, multipoint and rooted EVCs.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EVCProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/product/evc/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find an Ethernet Virtual Connection (EVC) product by ID.",
        "description": "A Product for an Ethernet Virtual Connection (EVC). EVC is an association between two or more user network interfaces that identifies a point-to-point or multipoint-to-multipoint path within the service provider network. Each endpoint of an EVC is defined as a user-to-network interface (UNI). There are three types of EVCs: point-to-point, multipoint and rooted EVCs.",
        "displayName": "EVC Product",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EVCProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing Ethernet Virtual Connection (EVC) product.",
        "description": "A Product for an Ethernet Virtual Connection (EVC). EVC is an association between two or more user network interfaces that identifies a point-to-point or multipoint-to-multipoint path within the service provider network. Each endpoint of an EVC is defined as a user-to-network interface (UNI). There are three types of EVCs: point-to-point, multipoint and rooted EVCs.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EVCProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EVCProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete an Ethernet Virtual Connection (EVC) product based on ID.",
        "description": "A Product for an Ethernet Virtual Connection (EVC). EVC is an association between two or more user network interfaces that identifies a point-to-point or multipoint-to-multipoint path within the service provider network. Each endpoint of an EVC is defined as a user-to-network interface (UNI). There are three types of EVCs: point-to-point, multipoint and rooted EVCs.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/product/uni": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a User Network Interface (UNI) product.",
        "description": "User Network Interface (UNI) is a service used as part of an Ethernet Private Line (EPL) product. A UNI serves as the point of demarcation that specifies where the service provider's (operator's) responsibility ends and the customer's responsibility begins. The UNI defines the means for the subscriber and the service provider to agree on which Ethernet service(s) will be offered and the characteristics of this service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UNIProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/product/uni/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a User Network Interface (UNI) product by ID.",
        "description": "User Network Interface (UNI) is a service used as part of an Ethernet Private Line (EPL) product. A UNI serves as the point of demarcation that specifies where the service provider's (operator's) responsibility ends and the customer's responsibility begins. The UNI defines the means for the subscriber and the service provider to agree on which Ethernet service(s) will be offered and the characteristics of this service.",
        "displayName": "UNI Product",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UNIProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing User Network Interface (UNI) product.",
        "description": "User Network Interface (UNI) is a service used as part of an Ethernet Private Line (EPL) product. A UNI serves as the point of demarcation that specifies where the service provider's (operator's) responsibility ends and the customer's responsibility begins. The UNI defines the means for the subscriber and the service provider to agree on which Ethernet service(s) will be offered and the characteristics of this service.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UNIProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UNIProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a User Network Interface (UNI) product based on ID.",
        "description": "User Network Interface (UNI) is a service used as part of an Ethernet Private Line (EPL) product. A UNI serves as the point of demarcation that specifies where the service provider's (operator's) responsibility ends and the customer's responsibility begins. The UNI defines the means for the subscriber and the service provider to agree on which Ethernet service(s) will be offered and the characteristics of this service.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/site": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Site"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/site/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "ServiceSite is a customer location where a customer is receiving service. It is the point at which service is delivered to a customer, and is associated with a service address (UrbanPropertyAddress).",
        "displayName": "Site",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Site"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/site/{id}/services": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find Services in a specific site",
        "description": "Returns a collection of Services found at the specified Site.",
        "displayName": "Service on Site",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the site to find services",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      }
    },
    "/account": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create an account.",
        "description": "Account defines the relationship between the customer and provider with respect to billing, payments, and other financial transactions. The customer account is also used to grant entitlement tokens based on services purchased.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/account/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find an account by ID.",
        "description": "Account defines the relationship between the customer and provider with respect to billing, payments, and other financial transactions. The customer account is also used to grant entitlement tokens based on services purchased.",
        "displayName": "Account ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing account.",
        "description": "Account defines the relationship between the customer and provider with respect to billing, payments, and other financial transactions. The customer account is also used to grant entitlement tokens based on services purchased.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete an account based on ID.",
        "description": "Account defines the relationship between the customer and provider with respect to billing, payments, and other financial transactions. The customer account is also used to grant entitlement tokens based on services purchased.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/productconfiguration": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a ProductConfiguration.",
        "description": "ProductConfiguration is the complete set of characteristics associated with a product in the catalog. Specifically, it is the parts of the product that are exposed to the customer and can be referenced during the ordering process. It also informs the requirements for service and resource ordering.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/productconfiguration/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a ProductConfiguration by ID.",
        "description": "ProductConfiguration is the complete set of characteristics associated with a product in the catalog. Specifically, it is the parts of the product that are exposed to the customer and can be referenced during the ordering process. It also informs the requirements for service and resource ordering.",
        "displayName": "Product Configuration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing ProductConfiguration.",
        "description": "ProductConfiguration is the complete set of characteristics associated with a product in the catalog. Specifically, it is the parts of the product that are exposed to the customer and can be referenced during the ordering process. It also informs the requirements for service and resource ordering.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a ProductConfiguration based on ID.",
        "description": "ProductConfiguration is the complete set of characteristics associated with a product in the catalog. Specifically, it is the parts of the product that are exposed to the customer and can be referenced during the ordering process. It also informs the requirements for service and resource ordering.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/service/uniconfiguration": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UNIServiceConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/service/uniconfiguration/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "A UNI can have a number of characteristics that will be important to the way that the CE sees a service. One of the key aspects of a service description will be the allowable mix of UNIs with different characteristics in an EVC.",
        "displayName": "UNI ServiceConfiguration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UNIServiceConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UNIServiceConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UNIServiceConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/user/{id}/tickets": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of User to whom the ticket needs to be created",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find resource by ID",
        "description": "Tickets associated with a given User.",
        "displayName": "Users  Tickets",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of User whose tickets need to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersTickets"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UsersTickets"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/service/evcconfiguration": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EVCServiceConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/service/evcconfiguration/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "The logical circuit that connects two or more customer networks (end points). The end points of an EVC are defined as UNIs. An intra-MEN EVC is an Ethernet Service that connects two (or more) UNIs provided by a single Operator within a single MEN. An inter-MEN EVC is an ENNI-based Ethernet Service that connects two or more UNIs that are located in different Operator MENs and physically provided by at least two MEN Operators.",
        "displayName": "EVC Service Configuration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EVCServiceConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EVCServiceConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EVCServiceConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/propertyaddress": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyAddress"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/propertyaddress/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "This is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).",
        "displayName": "Property Address",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertyAddress"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertyAddress"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/product/eplconfiguration": {
      "post": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EPLProductConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/product/eplconfiguration/{id}": {
      "get": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Find resource by ID",
        "description": "Access EPL service uses a Point-to-Point OVC to associate one OVC End Point at a UNI and one OVC End Point at an ENNI. One UNI can support only a single instance of the Access EPL service. ",
        "displayName": "EPL Product Configuration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EPLProductConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EPLProductConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EPLProductConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/productprice": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a ProductPrice.",
        "description": "ProductPrice is the actual price paid by a Customer for a purchase or lease of a Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/productprice/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a ProductPrice by ID.",
        "description": "ProductPrice is the actual price paid by a Customer for a purchase or lease of a Product.",
        "displayName": "Product Price",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing ProductPrice.",
        "description": "ProductPrice is the actual price paid by a Customer for a purchase or lease of a Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a ProductPrice based on ID.",
        "description": "ProductPrice is the actual price paid by a Customer for a purchase or lease of a Product.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customerquoteitem": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a customer quote item.",
        "description": "A price estimate (quote) or presentation for sale (offer) of product offerings to a Party playing the PartyRole of Customer.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerQuoteItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customerquoteitem/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a customer quote item by ID.",
        "description": "A price estimate (quote) or presentation for sale (offer) of product offerings to a Party playing the PartyRole of Customer.",
        "displayName": "Customer QuoteItem",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerQuoteItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing customer quote item.",
        "description": "A price estimate (quote) or presentation for sale (offer) of product offerings to a Party playing the PartyRole of Customer.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerQuoteItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerQuoteItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a customer quote item based on ID.",
        "description": "A price estimate (quote) or presentation for sale (offer) of product offerings to a Party playing the PartyRole of Customer.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/geographicaddress": {
      "post": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/geographicaddress/{id}": {
      "get": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Find resource by ID",
        "description": "A structured textual way of describing how to find a Geographic Location. It is usually composed of an ordered list of Geographic Location names based on context specific rulesIt is an abstract modeling concept that provides a linking point to other parts of the SID model.It holds attributes common to all Geographic Address subclasses.",
        "displayName": "Geographic  Address",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "UnSuported"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/property": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/property/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "A piece of land with defined legal boundaries.This is an example of a concrete Geographic Location entity.",
        "displayName": "Property ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/configurationdata": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/configurationdata/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "Class to hold common properties of all captured configuration data (files, strings, binary data, ...).  Subclasses specify base, current, backup, proposed, disaster recovery, etc configuration data.",
        "displayName": "Configuration Data",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigurationData"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConfigurationData"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/feature": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/feature/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "Retrieves an instance based on the ID",
        "displayName": "Feature ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/service/uni": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UNIService"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/service/uni/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "Serves as the point of demarcation that specifies where the Service Provider's (Operator's) responsibility ends and the customer's responsibility begins. The UNI is typically considered to reside at the customer network facing side of the PE equipment that the Service Provider places at the customer premises. The UNI has two sides: the UNI-C represents the customer premise facing side of the Provider Edge device, and the UNI-N represents the side of the PE that faces back towards the Service Provider (Operator) network. The organization responsible for the UNI-to-UNI (end-to-end) Ethernet service, i.e., the company that the end user Subscriber has the primary commercial relationship with for Ethernet services.",
        "displayName": "UNI Service",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UNIService"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UNIService"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UNIService"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/servicedesign": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AsBuiltOrderDesign"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/servicedesign/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "The technical specification of the service level being offered by the Service Provider to the Subscriber.",
        "displayName": "As  Built Design",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AsBuiltOrderDesign"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AsBuiltOrderDesign"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AsBuiltOrderDesign"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customerorderitem": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a CustomerOrderItem.",
        "description": "A CustomerOrderItem is a specific item within a CustomerOrder and is expressed in terms of a Product Offering or a Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerOrderItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customerorderitem/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a CustomerOrderItem by ID.",
        "description": "A CustomerOrderItem is a specific item within a CustomerOrder and is expressed in terms of a Product Offering or a Product.",
        "displayName": "Customer OrderItem",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerOrderItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing CustomerOrderItem.",
        "description": "A CustomerOrderItem is a specific item within a CustomerOrder and is expressed in terms of a Product Offering or a Product.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerOrderItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerOrderItem"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a CustomerOrderItem based on ID.",
        "description": "A CustomerOrderItem is a specific item within a CustomerOrder and is expressed in terms of a Product Offering or a Product.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/paymentplan": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a payment plan.",
        "description": "PaymentPlan defines a plan for customer payment and is associated with a CustomerAccount.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentPlan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/paymentplan/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a payment plan by ID.",
        "description": "PaymentPlan defines a plan for customer payment and is associated with a CustomerAccount.",
        "displayName": "Payment Plan",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "PaymentPlan defines the plan for payment via its associations to the PaymentMethod and PaymentItem priorities.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentPlan"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing payment plan.",
        "description": "PaymentPlan defines a plan for customer payment and is associated with a CustomerAccount.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentPlan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentPlan"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a payment plan based on ID.",
        "description": "PaymentPlan defines a plan for customer payment and is associated with a CustomerAccount.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/systemcontact": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a system contact.",
        "description": "SystemContact is a type of ContactMedium that provides a means of contact for a specific PartyRole that is not defined by other types of ContactMedium; for example, notification by instant message or trouble ticket generation and auto-assignment.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemContact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/systemcontact/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a system contact by ID.",
        "description": "SystemContact is a type of ContactMedium that provides a means of contact for a specific PartyRole that is not defined by other types of ContactMedium; for example, notification by instant message or trouble ticket generation and auto-assignment.",
        "displayName": "System  Contact",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SystemContact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing system contact.",
        "description": "SystemContact is a type of ContactMedium that provides a means of contact for a specific PartyRole that is not defined by other types of ContactMedium; for example, notification by instant message or trouble ticket generation and auto-assignment.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemContact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SystemContact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a system contact based on ID.",
        "description": "SystemContact is a type of ContactMedium that provides a means of contact for a specific PartyRole that is not defined by other types of ContactMedium; for example, notification by instant message or trouble ticket generation and auto-assignment.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/telephonenumber": {
      "post": {
        "tags": [
          "Common"
        ],
        "summary": "Create a telephone number for a PartyRole.",
        "description": "TelephoneNumber is the telephone number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TelephoneNumber"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/telephonenumber/{id}": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "Find a telephone number for a PartyRole by ID.",
        "description": "TelephoneNumber is the telephone number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "displayName": "Telephone  Number",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TelephoneNumber"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Common"
        ],
        "summary": "Update an existing telephone number for a PartyRole.",
        "description": "TelephoneNumber is the telephone number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TelephoneNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TelephoneNumber"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Common"
        ],
        "summary": "Delete a telephone number for a PartyRole based on ID.",
        "description": "TelephoneNumber is the telephone number to use when contacting a given PartyRole. It is a type of ContactMedium.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/serviceorder": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a ServiceOrder.",
        "description": "A ServiceOrder lists the services through which the products in a CustomerOrder are realized.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/serviceorder/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a ServiceOrder by ID.",
        "description": "A ServiceOrder lists the services through which the products in a CustomerOrder are realized.",
        "displayName": "Service  Order",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing ServiceOrder.",
        "description": "A ServiceOrder lists the services through which the products in a CustomerOrder are realized.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a ServiceOrder based on ID.",
        "description": "A ServiceOrder lists the services through which the products in a CustomerOrder are realized.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/serviceorder/sat": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a ServiceOrder/sat (SiteAcceptanceTest).",
        "description": "A ServiceOrder/sat (SiteAcceptanceTest) is a service order to perform a SiteAcceptanceTest for end-to-end acceptance testing. ",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SAT"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/serviceorder/sat/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a ServiceOrder/sat (SiteAcceptanceTest) by ID.",
        "description": "A ServiceOrder/sat (SiteAcceptanceTest) is a service order to perform a SiteAcceptanceTest for end-to-end acceptance testing.",
        "displayName": "SAT",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SAT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing ServiceOrder/sat (SiteAcceptanceTest).",
        "description": "A ServiceOrder/sat (SiteAcceptanceTest) is a service order to perform a SiteAcceptanceTest for end-to-end acceptance testing. ",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SAT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SAT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a ServiceOrder/sat (SiteAcceptanceTest) based on ID.",
        "description": "A ServiceOrder/sat (SiteAcceptanceTest) is a service order to perform a SiteAcceptanceTest for end-to-end acceptance testing.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/product": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a product.",
        "description": "A Product is the result of a ProductOffering being procured by a Customer or other Party. A Product is realized as one or more Services and/or Resources.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a product by ID.",
        "description": "A Product is the result of a ProductOffering being procured by a Customer or other Party. A Product is realized as one or more Services and/or Resources.",
        "displayName": "Product ",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing product.",
        "description": "A Product is the result of a ProductOffering being procured by a Customer or other Party. A Product is realized as one or more Services and/or Resources.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product based on ID.",
        "description": "A Product is the result of a ProductOffering being procured by a Customer or other Party. A Product is realized as one or more Services and/or Resources.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/comments": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find the Ticket-Comments (a list of comments) for a ticket.",
        "description": "Ticket-Comments is a list of entries to the log of a Ticket.",
        "displayName": "Comment Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create Ticket-Comments (a list of comments) for a ticket.",
        "description": "Ticket-Comments is a list of entries to the log of a Ticket.",
        "description": "",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance ",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/comment/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a Ticket-Comment by ID.",
        "description": "A Ticket-Comment is an entry to the log of a Ticket.",
        "displayName": "Comment",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to get comment",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing Ticket-Comment.",
        "description": "A Ticket-Comment is an entry to the log of a Ticket.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update comment",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a Ticket-Comment based on ID.",
        "description": "A Ticket-Comment is an entry to the log of a Ticket.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update comment",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/watchers": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find list of watchers for a ticket.",
        "description": "List of watchers for a given ticket.",
        "displayName": "Watcher Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WatcherList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance ",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/watcher/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find resource by ID",
        "description": "A watcher of a specific ticket.",
        "displayName": "Watcher",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to get watcher",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update watcher",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update watcher",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/modifiers": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a list of all modifiers for a ticket.",
        "description": "A list of modifiers for a given ticket.",
        "displayName": "Modifier Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ModifierList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a list of modifiers for a ticket.",
        "description": "A list of modifiers for a given ticket.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance ",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Modifier"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/modifier/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find resource by ID",
        "description": "A modifier of a specific ticket.",
        "displayName": "Modifier",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to get modifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update modifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Modifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Modifier"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update watcher",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/tasks": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find list of Tasks for a ticket.",
        "description": "List of Tasks for a given ticket.",
        "displayName": "Task Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance ",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/task/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find resource by ID",
        "description": "A modifier of a specific ticket.",
        "displayName": "Task",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to get task",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update task",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to delete task",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/contacts": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find the Ticket-Contacts (list of contacts) for a Ticket.",
        "description": "Ticket-Contacts is the list of contacts for a given ticket.",
        "displayName": "Ticket Contact Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ContactList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create Ticket-Contacts (list of contacts) for a Ticket.",
        "description": "Ticket-Contacts is the list of contacts for a given ticket.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance ",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/contact/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a Ticket-Contact by ID.",
        "description": "A Ticket-Contact is a modifier of a specific ticket.",
        "displayName": "Modifier",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to get contact",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing Ticket-Contact.",
        "description": "A Ticket-Contact is a modifier of a specific ticket.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update contact",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a Ticket-Contact based on ID.",
        "description": "A Ticket-Contact is a modifier of a specific ticket.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to delete contact",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ticket/{t-id}/locations": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a list of locations for a ticket.",
        "description": "A list of all locations associated with a given ticket.",
        "displayName": "Task Location Collection",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the ticket instance",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketLocationList"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a list of locations for a ticket.",
        "description": "A list of all locations associated with a given ticket.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance ",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TicketLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ticket/{t-id}/location/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a location for a ticket.",
        "description": "The location of some kind of incident recorded on a ticket, such as a service outage or a the location of a resource.",
        "displayName": "Modifier",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to get location",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketLocation"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update a location for a ticket.",
        "description": "The location of some kind of incident recorded on a ticket, such as a service outage or a the location of a resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to update location",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TicketLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketLocation"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a location for a ticket.",
        "description": "The location of some kind of incident recorded on a ticket, such as a service outage or a the location of a resource.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "t-id",
            "description": "ID of the ticket instance to delete location",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customerpayment": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a customer payment.",
        "description": "A CustomerPayment is the transfer of money from a Customer for products or services.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPayment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customerpayment/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a customer payment by ID.",
        "description": "A CustomerPayment is the transfer of money from a Customer for products or services.",
        "displayName": "Customer Payment",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerPayment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing customer payment.",
        "description": "A CustomerPayment is the transfer of money from a Customer for products or services.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPayment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerPayment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a customer payment based on ID.",
        "description": "A CustomerPayment is the transfer of money from a Customer for products or services.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customerquote": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a CustomerQuote.",
        "description": "A CustomerQuote is a price estimate (quote) or a presentation for sale (offer) of product offerings to a PartyRole such as a Customer.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerQuote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customerquote/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a CustomerQuote by ID.",
        "description": "A CustomerQuote is a price estimate (quote) or a presentation for sale (offer) of product offerings to a PartyRole such as a Customer.",
        "displayName": "Customer Quote",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerQuote"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing CustomerQuote.",
        "description": "A CustomerQuote is a price estimate (quote) or a presentation for sale (offer) of product offerings to a PartyRole such as a Customer.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerQuote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerQuote"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a CustomerQuote based on ID.",
        "description": "A CustomerQuote is a price estimate (quote) or a presentation for sale (offer) of product offerings to a PartyRole such as a Customer.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/productoffering": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a ProductOffering.",
        "description": "A ProductOffering is the presentation of one or more ProductSpecifications for sale or lease. A ProductOffering may include a single ProductSpecification or may be a bundling of one or more other ProductOfferings.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/productoffering/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find a ProductOffering by ID.",
        "description": "A ProductOffering is the presentation of one or more ProductSpecifications for sale or lease. A ProductOffering may include a single ProductSpecification or may be a bundling of one or more other ProductOfferings.",
        "displayName": "Product Offering",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update an existing ProductOffering.",
        "description": "A ProductOffering is the presentation of one or more ProductSpecifications for sale or lease. A ProductOffering may include a single ProductSpecification or may be a bundling of one or more other ProductOfferings.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a ProductOffering based on ID.",
        "description": "A ProductOffering is the presentation of one or more ProductSpecifications for sale or lease. A ProductOffering may include a single ProductSpecification or may be a bundling of one or more other ProductOfferings.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/serviceconfiguration": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/serviceconfiguration/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "Service Configuration management might be either the set up of network / resource components for a customer, or a class of customers of a generic service build. Service configuration can be derived from order details in addition to inherent business rules from service specifications.",
        "displayName": "Service Configuration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServiceConfiguration"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/cableservicearea": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CableServiceArea"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/cableservicearea/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find resource by ID",
        "description": "An area that it served by a Cable provider.  Typically this area would be that served by 1 or more Nodes in the cable plant.",
        "displayName": "Cable ServiceArea",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CableServiceArea"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CableServiceArea"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CableServiceArea"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/customerbill": {
      "post": {
        "tags": [
          "Interaction"
        ],
        "summary": "Create a CustomerBill.",
        "description": "A CustomerBill is the total amount due from a CustomerAccount for all products during a billing period.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerBill"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/customerbill/{id}": {
      "get": {
        "tags": [
          "Interaction"
        ],
        "summary": "Find a CustomerBill by ID.",
        "description": "A CustomerBill is the total amount due from a CustomerAccount for all products during a billing period.",
        "displayName": "Customer Bill",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerBill"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Interaction"
        ],
        "summary": "Update an existing CustomerBill.",
        "description": "A CustomerBill is the total amount due from a CustomerAccount for all products during a billing period.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerBill"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomerBill"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Interaction"
        ],
        "summary": "Delete a CustomerBill based on ID.",
        "description": "A CustomerBill is the total amount due from a CustomerAccount for all products during a billing period.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/ethernetinterface": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new resource",
        "description": "Create a new instance of the resource.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EthernetInterface"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ethernetinterface/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find resource by ID",
        "description": "Retrieves an instance based on the ID",
        "displayName": "Ethernet Interface",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EthernetInterface"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Service"
        ],
        "summary": "Update an existing resource",
        "description": "Update a specific instance of the resource by ID.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EthernetInterface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EthernetInterface"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a resource based on ID.",
        "description": "Delete a specific instance based on the ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    },
    "/emailcontact": {
      "post": {
        "tags": [
          "Common"
        ],
        "summary": "Create an e-mail contact.",
        "description": "EmailContact is the e-mail address to use when contacting a given PartyRole. An eMailContact is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailContact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/emailcontact/{id}": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "Find an e-mail contact by ID.",
        "description": "EmailContact is the e-mail address to use when contacting a given PartyRole. An eMailContact is a type of ContactMedium.",
        "displayName": "Email  Contact",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of instance that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "view",
            "description": "View of the resource that you want to get.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EmailContact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          }
        }
      },
      "put": {
        "tags": [
          "Common"
        ],
        "summary": "Update an existing e-mail contact.",
        "description": "EmailContact is the e-mail address to use when contacting a given PartyRole. An eMailContact is a type of ContactMedium.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Instance object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailContact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EmailContact"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Instance not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Common"
        ],
        "summary": "Delete an e-mail contact based on ID.",
        "description": "EmailContact is the e-mail address to use when contacting a given PartyRole. An eMailContact is a type of ContactMedium.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Instance id to be deleted",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted."
          },
          "400": {
            "description": "Invalid Instance value"
          }
        }
      }
    }
  },
  "schemes": [
    "http"
  ],
  "definitions": {
    "Link": {
      "id": "Link",
      "properties": {
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Quantity": {
      "id": "Quantity",
      "type": "Object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "units": {
          "type": "string"
        }
      }
    },
    "Money": {
      "id": "Money",
      "properties": {
        "amount": {
          "type": "string"
        },
        "units": {
          "type": "string"
        }
      }
    },
    "Duration": {
      "id": "Duration",
      "properties": {
        "units": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        }
      }
    },
    "CostRate": {
      "id": "CostRate",
      "properties": {
        "denominator": {
          "$ref": "Duration"
        },
        "numerator": {
          "$ref": "Money"
        }
      }
    },
    "Account": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "accountNumber": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Individual, Joint, Other"
        },
        "pin": {
          "type": "integer"
        },
        "status": {
          "type": "string",
          "description": "Active, Suspended, Inactive, Closed"
        },
        "financialStatus": {
          "type": "string",
          "description": "Current, Due ,InArrears, Delinquent"
        },
        "creditLimit": {
          "type": "integer"
        },
        "customer": {
          "$ref": "CustomerSummary"
        },
        "serviceAddress": {
          "$ref": "PropertyAddress"
        },
        "primaryUser": {
          "$ref": "UserSummary"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "UserSummary"
          }
        },
        "financials": {
          "$ref": "FinancialSummary"
        },
        "billing": {
          "$ref": "BillingSummary"
        },
        "payments": {
          "$ref": "PaymentSummary"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "ProductSummary"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "DeviceSummary"
          }
        },
        "taxExemptions": {
          "$ref": "TaxExemptions"
        },
        "sites": {
          "type": "array",
          "items": {
            "$ref": "SiteSummary"
          }
        },
        "preferences": {
          "type": "array",
          "items": {
            "$ref": "PreferenceSummary"
          }
        },
        "relatedAccounts": {
          "type": "array",
          "items": {
            "$ref": "AccountSummary"
          }
        }
      }
    },
    "AccountSummary": {
      "id": "AccountSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ContactList": {
      "id": "ContactList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available contacts in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of contacts returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of contacts in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned contacts in this collection.",
          "items": {
            "$ref": "ContactSummary"
          }
        }
      }
    },
    "ContactSummary": {
      "id": "ContactSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "contactType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Contact": {
      "id": "Contact",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "contactType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "individual": {
          "$ref": "Individual"
        },
        "contactMediums": {
          "$ref": "ContactMedium"
        },
        "partyDetails": {
          "$ref": "PartySummary"
        }
      }
    },
    "ContactMedium": {
      "id": "ContactMedium",
      "type": "object",
      "properties": {
        "telephoneNumbers": {
          "type": "array",
          "items": {
            "$ref": "TelephoneNumber"
          }
        },
        "faxNumbers": {
          "type": "array",
          "items": {
            "$ref": "FaxNumber"
          }
        },
        "emailContacts": {
          "type": "array",
          "items": {
            "$ref": "EmailContact"
          }
        },
        "postalContacts": {
          "type": "array",
          "items": {
            "$ref": "PostalContact"
          }
        },
        "systemContacts": {
          "type": "array",
          "items": {
            "$ref": "SystemContact"
          }
        }
      }
    },
    "TimePeriod": {
      "id": "TimePeriod",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AccountContact": {
      "id": "AccountContact",
      "properties": {
        "serviceSites": {
          "type": "array",
          "items": {
            "$ref": "Site"
          }
        },
        "acccount": {
          "$ref": "Account"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "contactType": {
          "$ref": "AccountContactType"
        },
        "contactMediums": {
          "type": "array",
          "items": {
            "$ref": "ContactMedium"
          }
        },
        "contact": {
          "$ref": "Contact"
        }
      }
    },
    "SiteCategory": {
      "id": "SiteCategory",
      "properties": {
        "categoryDescription": {
          "type": "string"
        },
        "categoryName": {
          "type": "string"
        }
      }
    },
    "CableServiceArea": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "Feature": {
      "type": "object",
      "properties": {
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "FeatureCollection": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Feature"
          }
        }
      }
    },
    "Geometry": {
      "type": "object",
      "properties": {
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem"
        },
        "geometryCollection": {
          "type": "object",
          "$ref": "GeometryCollection"
        }
      }
    },
    "SpatialReferenceSystem": {
      "type": "object",
      "properties": {
        "geometrys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Geometry"
          }
        }
      }
    },
    "GeometryCollection": {
      "type": "object",
      "properties": {
        "geometry": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Geometry"
          }
        }
      }
    },
    "Line": {
      "type": "object",
      "properties": {
        "polygon": {
          "type": "object",
          "$ref": "Polygon",
          "required": true
        },
        "geometryCollection": {
          "type": "object",
          "$ref": "GeometryCollection",
          "required": true
        },
        "multiLineString": {
          "type": "object",
          "$ref": "MultiLineString",
          "required": true
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem",
          "required": true
        },
        "points": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Point"
          }
        },
        "geographicLocation": {
          "type": "object",
          "$ref": "GeographicLocation",
          "required": true
        }
      }
    },
    "LinearRing": {
      "type": "object",
      "properties": {
        "polygon": {
          "type": "object",
          "$ref": "Polygon",
          "required": true
        },
        "geometryCollection": {
          "type": "object",
          "$ref": "GeometryCollection",
          "required": true
        },
        "multiLineString": {
          "type": "object",
          "$ref": "MultiLineString",
          "required": true
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem",
          "required": true
        },
        "points": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Point"
          }
        },
        "geographicLocation": {
          "type": "object",
          "$ref": "GeographicLocation",
          "required": true
        }
      }
    },
    "MultiLineString": {
      "type": "object",
      "properties": {
        "lineStrings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "LineString"
          }
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem",
          "required": true
        }
      }
    },
    "LineString": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Point"
          }
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem"
        }
      }
    },
    "MultiPoint": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Point"
          }
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem",
          "required": true
        }
      }
    },
    "Point": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        },
        "elevation": {
          "type": "string"
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem"
        }
      }
    },
    "MultiPolygon": {
      "type": "object",
      "properties": {
        "geometryCollection": {
          "type": "object",
          "$ref": "GeometryCollection",
          "required": true
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem",
          "required": true
        },
        "polygons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Polygon"
          }
        },
        "geographicLocation": {
          "type": "object",
          "$ref": "GeographicLocation",
          "required": true
        }
      }
    },
    "Polygon": {
      "type": "object",
      "properties": {
        "lineStrings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "LineString"
          }
        },
        "geometryCollection": {
          "type": "object",
          "$ref": "GeometryCollection",
          "required": true
        },
        "spatialReferenceSystem": {
          "type": "object",
          "$ref": "SpatialReferenceSystem",
          "required": true
        },
        "link": {
          "type": "object",
          "$ref": "Link",
          "required": true
        }
      }
    },
    "GeographicLocation": {
      "type": "object",
      "properties": {
        "accuracy": {
          "type": "string"
        },
        "property": {
          "type": "object",
          "$ref": "Property"
        },
        "cableServiceArea": {
          "type": "object",
          "$ref": "CableServiceArea"
        },
        "exchangeServiceArea": {
          "type": "object",
          "$ref": "ExchangeServiceArea"
        },
        "marketArea": {
          "type": "object",
          "$ref": "MarketArea"
        },
        "geographicArea": {
          "type": "object",
          "$ref": "GeographicArea"
        },
        "rateGroupRegion": {
          "type": "object",
          "$ref": "RateGroupRegion"
        },
        "rateCenter": {
          "type": "object",
          "$ref": "RateCenter"
        },
        "emergencyServiceZone": {
          "type": "object",
          "$ref": "EmergencyServiceZone"
        },
        "timeZoneRegion": {
          "type": "object",
          "$ref": "TimeZoneRegion"
        },
        "administrativeArea": {
          "type": "object",
          "$ref": "AdministrativeArea"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "AdministrativeArea": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "MUNICIPALITY, CENSUS DISTRICT, ELECTORAL AREA, COUNTY, PARISH"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "TimeZoneRegion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "timeZoneName": {
          "type": "string"
        },
        "timeZoneCode": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "EmergencyServiceZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "ExchangeServiceArea": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "MarketArea": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "marketAreaName": {
          "type": "string"
        },
        "marketAreaType": {
          "type": "string"
        },
        "marketRank": {
          "type": "integer"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "GeographicArea": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "RateGroupRegion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "rateGroupRegionName": {
          "type": "string"
        },
        "rateGroup": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "RateCenter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "rateCenterName": {
          "type": "string"
        },
        "rateGroupCode": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry"
        }
      }
    },
    "Property": {
      "id": "Property",
      "properties": {
        "id": {
          "type": "string"
        },
        "lotNr": {
          "type": "string"
        },
        "landUse": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "elevation": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "landCover": {
          "type": "string"
        },
        "propertyAddresses": {
          "type": "array",
          "items": {
            "$ref": "PropertyAddress"
          }
        },
        "naturalRisks": {
          "type": "string"
        },
        "geometry": {
          "$ref": "Geometry"
        }
      }
    },
    "ServiceSummary": {
      "id": "ServiceSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        }
      }
    },
    "VHCoordinates": {
      "id": "VHCoordinates",
      "properties": {
        "horizontalCoordinate": {
          "type": "string"
        },
        "verticalCoordinate": {
          "type": "string"
        }
      }
    },
    "PropertyAddress": {
      "id": "PropertyAddress",
      "properties": {
        "id": {
          "type": "string"
        },
        "postalcode": {
          "type": "string"
        },
        "state_province": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "locality": {
          "type": "string"
        },
        "property": {
          "$ref": "Property"
        },
        "formattedAddressLine2": {
          "type": "string"
        },
        "formattedAddressLine1": {
          "type": "string"
        },
        "postcodeExtension": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "SiteList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "validFor": {
          "type": "object",
          "$ref": "TimePeriod"
        },
        "sites": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Site"
          }
        }
      }
    },
    "SiteSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "multiTenant": {
          "type": "boolean"
        },
        "clliCode": {
          "type": "string"
        },
        "siteHours": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Active, Off, Pending",
          "enum": ["Active", "Off", "Pending"]
        }
      }
    },
    "Site": {
      "id": "Site",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "type": {
          "type": "string",
          "description": "ServiceSite, ProviderSite, Other",
          "enum": [ "ServiceSite", "ProviderSite", "Other" ]
        },
        "name": {
          "type": "string"
        },
        "multiTenant": {
          "type": "boolean"
        },
        "siteHours": {
          "type": "string"
        },
        "structureHeight": {
          "$ref": "Quantity"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Active, Off, Pending",
          "enum": ["Active", "Off", "Pending"]
        },
        "clliCode": {
          "type": "string"
        },
        "category": {
          "type": "object",
          "$ref": "SiteCategory"
        },
        "vhCoordinates": {
          "type": "object",
          "$ref": "VHCoordinates"
        },
        "validFor": {
          "type": "object",
          "$ref": "TimePeriod"
        },
        "accountContacts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "AccountContactAssignment"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "AccountSummary"
          }
        },
        "propertyAddress": {
          "type": "object",
          "$ref": "PropertyAddress"
        },
        "geographicLocations": {
          "type": "array",
          "items": {
            "$ref": "GeographicLocation"
          }
        }
      }
    },
    "Location": {
      "id": "Location",
      "properties": {
        "site": {
          "$ref": "Site"
        },
        "propertyAddress": {
          "$ref": "PropertyAddress"
        }
      }
    },
    "ProductConfigurationSummary": {
      "id": "ProductConfigurationSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        }
      }
    },
    "ProductConfiguration": {
      "id": "ProductConfiguration",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "products": {
          "$ref": "ProductConfigurationSummary"
        },
        "serviceConfigurations": {
          "$ref": "ServiceConfiguration"
        },
        "product": {
          "$ref": "Product"
        },
        "productProperties": {
          "$ref": "ProductProperties"
        }
      }
    },
    "EPLConfiguration": {
      "id": "EPLConfiguration",
      "type": "obkect",
      "properties": {
        "bandwidth": {
          "$ref": "Quantity"
        },
        "a_Address": {
          "$ref": "Site"
        },
        "z_Address": {
          "$ref": "Site"
        }
      }
    },
    "EVCProductConfiguration": {
      "id": "EVCProductConfiguration",
      "properties": {
        "bandwidth": {
          "$ref": "Quantity"
        },
        "a_Address": {
          "$ref": "Site"
        },
        "z_Address": {
          "$ref": "Site"
        }
      }
    },
    "UNIProductConfiguration": {
      "id": "UNIProductConfiguration",
      "properties": {
        "bandwidth": {
          "$ref": "Quantity"
        },
        "address": {
          "$ref": "Site"
        }
      }
    },
    "UNIProduct": {
      "id": "UNIProduct",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "uniService": {
          "$ref": "UNIService"
        },
        "uniProductConfiguration": {
          "$ref": "UNIProductConfiguration"
        }
      }
    },
    "EVCServiceSummary": {
      "id": "EVCServiceSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "EVCService": {
      "id": "EVCService",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "startMode": {
          "type": "number",
          "description" : "0:  Unknown, 1:  Automatically by the managed environment, 2:  Automatically by the owning device, 3:  Manually by the Provider of the Service, 4:  Manually by a Customer of the Provider, 5:  Any of the above"
        },
        "isStateful": {
          "type": "boolean"
        },
        "isFCCReportable": {
          "type": "boolean"
        },
        "isTSP": {
          "type": "boolean"
        },
        "isResourceFacingService": {
          "type": "boolean"
        },
        "isCustomerFacingService": {
          "type": "boolean"
        },
        "rfsStatus": {
          "type": "number"
        },
        "cfsStatus": {
          "type": "number"
        },
        "customerFacingService": {
          "type": "array",
          "items": {
            "$ref": "EVCServiceSummary"
          }
        },
        "resourceFacingService": {
          "type": "array",
          "items": {
            "$ref": "EVCServiceSummary"
          }
        },
        "unis": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceSummary"
          }
        },
        "configuration": {
          "$ref": "EVCConfiguration"
        },
        "path": {
          "$ref": "NetworkPath"
        }

      }
    },
    "EVCProduct": {
      "id": "EVCProduct",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "evcService": {
          "$ref": "EVCService"
        },
        "evcProductConfiguration": {
          "$ref": "EVCProductConfiguration"
        }
      }
    },
    "EPLProductSummary": {
      "id": "EPLProductSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        }
      }
    },
    "EPLProduct": {
      "id": "EPLProduct",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "EPLProductSummary"
          }
        },
        "productRelationships": {
          "type": "array",
          "items": {
            "$ref": "ProductRelationship"
          }
        },
        "productPrices": {
          "type": "array",
          "items": {
            "$ref": "ProductPriceSummary"
          }
        },
        "customerAccountInvolvements": {
          "type": "array",
          "items": {
            "$ref": "AccountProductAssignment"
          }
        },
        "productOrderItem": {
          "$ref": "OrderItem"
        },
        "productSpecification": {
          "$ref": "ProductSpecificationSummary"
        },
        "productOffering": {
          "$ref": "ProductOfferingSummary"
        },
        "configuration": {
          "$ref": "EPLConfiguration"
        },
        "uniProducts": {
          "type": "array",
          "items": {
            "$ref": "UNIProductSummary"
          }
        },
        "evcProduct": {
          "$ref": "EVCProductSummary"
        }
      }
    },
    "OrderItem": {
      "id": "OrderItem",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "action": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "NEW, PRESALES, POSTSALES, PROVISIONING, ACTIVATION, CANCELED, COMPLETED, WAITING_ON_EXTERNAL_ACTION"
        },
        "quantity": {
          "$ref": "Quantity"
        },
        "product": {
          "$ref": "OrderProduct"
        },
        "existingSite": {
          "$ref": "SiteSummary"
        },
        "newSite": {
          "$ref": "SiteSummary"
        },
        "device": {
          "$ref": "DeviceSummary"
        },
        "stateTransitions": {
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        }
      }
    },
    "OrderProduct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "configuration": {
          "type": "object",
          "oneOf": [
            { "$ref": "EVCConfiguration" },
            { "$ref": "EPLConfiguration" },
            { "$ref": "UNIConfiguration" },
            { "$ref": "GenericConfiguration" }
          ]
        }
      }
    },
    "CustomerQuoteItem": {
      "id": "CustomerQuoteItem",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "nonRecurringCost": {
          "$ref": "Money"
        },
        "recurringCost": {
          "$ref": "CostRate"
        },
        "action": {
          "type": "string"
        },
        "interactionItemStatus": {
          "type": "string"
        },
        "quantity": {
          "$ref": "Quantity"
        }
      }
    },
    "Customer": {
      "id": "Customer",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "profile": {
          "$ref": "PartySummary"
        },
        "customerId": {
          "type": "string"
        },
        "customerRank": {
          "type": "string"
        },
        "customerSegment": {
          "$ref": "CustomerSegment"
        },
        "status": {
          "type": "string"
        },
        "contactPhones": {
          "type": "array",
          "items": {
            "$ref": "TelephoneNumber"
          }
        },
        "contactEmails": {
          "type": "array",
          "items": {
            "$ref": "EmailContact"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "AccountSummary"
          }
        }
      }
    },
    "CustomerQuoteSummary": {
      "id": "CustomerQuoteSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "interactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "interactionDateComplete": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CustomerQuote": {
      "id": "CustomerQuote",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "interactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "interactionDateComplete": {
          "type": "string",
          "format": "date-time"
        },
        "interactionStatus": {
          "type": "string"
        },
        "customer": {
          "$ref": "Customer"
        },
        "customerQuoteItems": {
          "type": "array",
          "items": {
            "$ref": "CustomerQuoteItem"
          }
        }
      }
    },
    "OrderSummary": {
      "id": "OrderSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "orderState": {
          "type": "string",
          "description": "NEW, SUBMITTED, INPROGRESS, CANCELED, COMPLETED, WAITING_ON_EXTERNAL_ACTION"
        },
        "customerOrderType": {
          "type": "string",
          "description": "NewConnect, Disconnect, RecordsCorrection, Modifiy"
        },
        "feasibility": {
          "type": "string",
          "description": "FEASIBLE, CHANGED, NOTFEASIBLE"
        },
        "purchaseOrderNumber": {
          "type": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Order": {
      "id": "Order",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "status": {
          "type": "string",
          "description": "NEW, SUBMITTED, INPROGRESS, CANCELED, COMPLETED, WAITING_ON_EXTERNAL_ACTION",
          "enum": ["NEW, SUBMITTED, INPROGRESS, CANCELED, COMPLETED, WAITING_ON_EXTERNAL_ACTION"]
        },
        "orderType": {
          "type": "string",
          "description": "NewConnect, Disconnect, RecordsCorrection, Modify",
          "enum": ["NewConnect, Disconnect, RecordsCorrection, Modify"]
        },
        "feasibility": {
          "type": "string",
          "description": "FEASIBLE, CHANGED, NOTFEASIBLE",
          "enum": ["FEASIBLE, CHANGED, NOTFEASIBLE"]
        },
        "purchaseOrderNumber": {
          "type": "string"
        },
        "orderCategory": {
          "type": "string",
          "description": "ADDRESSCHANGE, BANDWIDTHCHANGE, OTHER",
          "enum": ["ADDRESSCHANGE, BANDWIDTHCHANGE, OTHER"]
        },
        "description": {
          "type": "string"
        },
        "saleSource": {
          "type": "string"
        },
        "assignedPriority": {
          "type": "number"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time"
        },
        "dateComplete": {
          "type": "string",
          "format": "date-time"
        },
        "assignedResponseDate": {
          "type": "string",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "OrderItem"
          }
        },
        "customerQuote": {
          "$ref": "CustomerQuoteSummary"
        },
        "account": {
          "$ref": "AccountSummary"
        },
        "stateTransitions": {
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        }
      }
    },
    "ServiceConfigurationSummary": {
      "id": "ServiceConfigurationSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "ServiceConfiguration": {
      "id": "ServiceConfiguration",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "startMode": {
          "type": "integer",
          "description": "0:  Unknown, 1:  Automatically by the managed environment, 2:  Automatically by the owning device, 3:  Manually by the Provider of the Service, 4:  Manually by a Customer of the Provider, 5:  Any of the above"
        },
        "isStateful": {
          "type": "boolean"
        },
        "isFCCReportable": {
          "type": "boolean"
        },
        "isTSP": {
          "type": "boolean"
        },
        "isResourceFacingService": {
          "type": "boolean"
        },
        "isCustomerFacingService": {
          "type": "boolean"
        },
        "rfsStatus": {
          "type": "integer"
        },
        "cfsStatus": {
          "type": "integer"
        },
        "customerFacingService": {
          "type": "array",
          "items": {
            "$ref": "ServiceConfigurationSummary"
          }
        },
        "resourceFacingService": {
          "type": "array",
          "items": {
            "$ref": "ServiceConfigurationSummary"
          }
        },
        "service": {
          "$ref": "ServiceSummary"
        },
        "configurationDatas": {
          "type": "array",
          "items": {
            "$ref": "ConfigurationData"
          }
        },
        "resourceFacingServices": {
          "type": "array",
          "items": {
            "$ref": "ResourceConfiguration"
          }
        }
      }
    },
    "ResourceConfiguration": {
      "id": "ResourceConfiguration",
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "$ref": "ServiceConfigurationSummary"
          }
        }
      }
    },
    "ServiceRoleSummary": {
      "id": "ServiceRoleSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        }
      }
    },
    "ServiceRole": {
      "id": "ServiceRole",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "roleCombination": {
          "type": "string"
        },
        "roleSelectionMethod": {
          "type": "integer"
        },
        "requiredBy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ServiceRoleSummary"
          }
        },
        "requires": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ServiceRoleSummary"
          }
        },
        "service": {
          "type": "object",
          "$ref": "ServiceSummary"
        }
      }
    },
    "ServiceOrderItem": {
      "id": "ServiceOrderItem",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "action": {
          "type": "string",
          "description": "ADDRESSCHANGE, BANDWIDTHCHANGE, OTHER"
        },
        "quantity": {
          "$ref": "Quantity"
        },
        "interactionItemStatus": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "serviceConfiguration": {
          "$ref": "ServiceConfigurationSummary"
        },
        "device": {
          "$ref": "DeviceSummary"
        },
        "evcServiceConfiguration": {
          "$ref": "EVCServiceConfigurationSummary"
        },
        "uniServiceConfigurations": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceConfigurationSummary"
          }
        },
        "orderDesign": {
          "$ref": "OrderDesign"
        }
      }
    },
    "ServiceOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "interactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "interactionDateComplete": {
          "type": "string",
          "format": "date-time"
        },
        "interactionStatus": {
          "type": "string"
        },
        "serviceOrderItems": {
          "type": "array",
          "items": {
            "$ref": "ServiceOrderItem"
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "characteristics": {
          "type": "array",
          "items": {
            "$ref": "Characteristic"
          }
        },
        "customers": {
          "type": "array",
          "items": {
            "$ref": "CustomerSummary"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "AccountSummary"
          }
        },
        "sat": {
          "$ref": "SAT"
        },
        "asBuiltOrderDesign": {
          "$ref": "AsBuiltOrderDesign"
        }
      }
    },
    "SAT": {
      "id": "SAT",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "pass": {
          "type": "boolean"
        },
        "throughput": {
          "$ref": "Quantity"
        },
        "frameloss": {
          "$ref": "Quantity"
        },
        "latency": {
          "$ref": "Quantity"
        },
        "systemreset": {
          "type": "boolean"
        },
        "systemrecover": {
          "type": "boolean"
        }
      }
    },
    "AsBuiltOrderDesign": {
      "id": "AsBuiltOrderDesign",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "fullAsBuiltNetwork": {
          "$ref": "Link"
        },
        "evcService": {
          "$ref": "EVCServiceSummary"
        },
        "uniServices": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceSummary"
          }
        }
      }
    },
    "EVCConfiguration": {
      "type": "object",
      "properties": {
        "configText": {
          "type": "string"
        },
        "configBinary": {
          "type": "number"
        },
        "configLocation": {
          "type": "object",
          "$ref": "Link"
        },
        "configActivationType": {
          "type": "string",
          "description": "Base, Current, Backup, Planned, Test, Template"
        },
        "isColorBlind": {
          "type": "boolean"
        },
        "bandwidth": {
          "$ref": "Quantity"
        }
      }
    },
    "EVCServiceConfigurationSummary": {
      "id": "EVCServiceConfigurationSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "EVCServiceConfiguration": {
      "id": "EVCServiceConfiguration",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "startMode": {
          "type": "integer"
        },
        "isStateful": {
          "type": "boolean"
        },
        "isFCCReportable": {
          "type": "boolean"
        },
        "isTSP": {
          "type": "boolean"
        },
        "isResourceFacingService": {
          "type": "boolean"
        },
        "isCustomerFacingService": {
          "type": "boolean"
        },
        "rfsStatus": {
          "type": "integer"
        },
        "cfsStatus": {
          "type": "integer"
        },
        "customerFacingService": {
          "type": "array",
          "items": {
            "$ref": "EVCServiceConfigurationSummary"
          }
        },
        "resourceFacingService": {
          "type": "array",
          "items": {
            "$ref": "EVCServiceConfigurationSummary"
          }
        },
        "unis": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceConfigurationSummary"
          }
        },
        "configuration": {
          "$ref": "EVCConfiguration"
        },
        "path": {
          "$ref": "NetworkPath"
        },
        "service": {
          "$ref": "EVCService"
        }
      }
    },
    "EthernetInterfaceSummary": {
      "id": "EthernetInterfaceSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "customerInterfaceNumber": {
          "type": "integer"
        },
        "deviceConfigMethod": {
          "type": "string",
          "description" : "0 - not configured, 1 - using the CONSOLE port, 2 - using the AUXILIARY port, 3 - using a virtual terminal interface, 4 - download through a TFTP server, 5 - download through an FTP server, 6 - download through a NMS"
        },
        "physicalPort": {
          "$ref": "PhysicalPort"
        },
        "macAddress": {
          "$ref": "MACAddress"
        }
      }
    },
    "EthernetInterface": {
      "id": "EthernetInterface",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "customerInterfaceNumber": {
          "type": "integer"
        },
        "deviceConfigMethod": {
          "type": "string",
          "description" : "0 - not configured, 1 - using the CONSOLE port, 2 - using the AUXILIARY port, 3 - using a virtual terminal interface, 4 - download through a TFTP server, 5 - download through an FTP server, 6 - download through a NMS"
        },
        "hasCarrierDetect": {
          "type": "boolean"
        },
        "hasDataLink": {
          "type": "boolean"
        },
        "isInterfaceEnabled": {
          "type": "boolean"
        },
        "vendorInterfaceNumber": {
          "type": "integer"
        },
        "interfaceInitResetCount": {
          "type": "integer"
        },
        "syncLostCount": {
          "type": "integer"
        },
        "physicalPort": {
          "$ref": "PhysicalPort"
        },
        "macAddress": {
          "$ref": "MACAddress"
        },
        "resourcePort": {
          "$ref": "Port"
        }
      }
    },
    "TerminationPoint": {
      "id": "TerminationPoint",
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": "0: Unknown, 1: Sources Traffic, 2: Sinks Traffic, 3: Carries Traffic Bi-directionally"
        },
        "vendorTPName": {
          "type": "string"
        },
        "typeOfTP": {
          "type": "string",
          "description": "0: unknown, 1: uni-directional, source, 2: uni-directional, sink, 3: bi-directional, source, 4: bi-directional, sink"
        },
        "endPointLabel": {
          "type": "string"
        },
        "sideType": {
          "type": "string",
          "description": "Legal values::  0 - unknown, 1 - ProviderEdge, 2 - CustomerEdge, 3 - ProviderCore, 9 - Other"
        },
        "ethernetInterface": {
          "$ref": "EthernetInterfaceSummary"
        }
      }
    },
    "NetworkPath": {
      "id": "NetworkPath",
      "type": "object",
      "properties": {
        "alternatePathIdentifier": {
          "type": "string"
        },
        "noOfChannels": {
          "type": "number"
        },
        "topology": {
          "type": "string"
        },
        "signaling": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        },
        "channelType": {
          "type": "string"
        },
        "framing": {
          "type": "string"
        },
        "terminationPoints": {
          "type": "array",
          "items": {
            "$ref": "TerminationPoint"
          }
        }
      }
    },
    "UNIConfig": {
      "id": "UNIConfig",
      "type": "object",
      "properties": {
        "configText": {
          "type": "string"
        },
        "configBinary": {
          "type": "array",
          "items": {
            "$ref": "number"
          }
        },
        "configLocation": {
          "$ref": "Link"
        },
        "configActivationType": {
          "type": "string",
          "description": "Base, Current, Backup, Planned, Test, Template"
        },
        "bandwidth": {
          "$ref": "Quantity"
        },
        "duplexMode": {
          "type": "integer"
        },
        "macLayer": {
          "type": "integer"
        },
        "isColorBlind": {
          "type": "boolean"
        },
        "isServiceMultiplexed": {
          "type": "boolean"
        },
        "vlanTagging": {
          "type": "integer",
          "description": "Defines how 802.1q VLAN Tags are handled at the UNI. Legal values are:  0 - unknown / undefined, 1 - VLAN Tags are prohibited at the UNI, 2 - VLAN Tags are mapped at the UNI (see the VLANtoEVCMap), 3 - VLAN Tags are preserved at the UNI via Q-in-Q VLAN Tag Stacking, 4 - VLAN Tags are preserved at the UNI via MAC-in-MAC Header Stacking"
        },
        "mtuSize": {
          "type": "integer"
        }
      }
    },
    "UNIServiceConfigurationSummary": {
      "id": "UNIServiceConfigurationSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "UNIServiceConfiguration": {
      "id": "UNIServiceConfiguration",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "startMode": {
          "type": "number"
        },
        "isStateful": {
          "type": "boolean"
        },
        "isFCCReportable": {
          "type": "boolean"
        },
        "isTSP": {
          "type": "boolean"
        },
        "isResourceFacingService": {
          "type": "boolean"
        },
        "isCustomerFacingService": {
          "type": "boolean"
        },
        "rfsStatus": {
          "type": "number"
        },
        "cfsStatus": {
          "type": "number"
        },
        "customerFacingService": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceConfigurationSummary"
          }
        },
        "resourceFacingService": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceConfigurationSummary"
          }
        },
        "config": {
          "$ref": "UNIConfig"
        },
        "path": {
          "$ref": "NetworkPath"
        },
        "uniService": {
          "$ref": "UNIService"
        },
        "evc": {
          "$ref": "EVCServiceConfigurationSummary"
        }
      }
    },
    "EvcSummary": {
      "id": "EvcSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        }
      }
    },
    "MACAddress": {
      "id": "MACAddress",
      "type": "object",
      "properties": {
        "macAddress": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        }
      }
    },
    "CardSummary": {
      "id": "CardSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        }
      }
    },
    "PhysicalPortConfig": {
      "id": "PhysicalPortConfig",
      "properties": {
        "physicalMediaType": {
          "type": "number",
          "description": "0: Unknown, 1: 10BaseT, 2: 100BaseT, 3: 10-100BaseT, 4: 1000BaseT, 5: 10000BaseT, 6: DS-0, 7: DS-1, 8: DS-3, 9: OC-3, 10: OC-12, 11: OC-48, 12: OC-192, 13: T1, 14: T3, 15: E1, 16: E3, 17: RS-232C"
        },
        "maxSpeed": {
          "$ref": "Quantity",
          "description": "Special values:: 0: unknown, -1: auto-sense"
        },
        "duplexMode": {
          "type": "number",
          "description": "0: auto-negotiate duplex operation, 1: full-duplex, 2: half-duplex"
        },
        "mgmtInfoValidFor": {
          "$ref": "TimePeriod"
        },
        "retrievalMethodCurrent": {
          "type": "number",
          "description": "0:  Unknown, 1:  None, 2:  CLI, 3:  SNMP, 4:  TL1, 5:  CMIP, 6:  RMON, 7:  Proprietary"
        },
        "retrievalMethodsSupported": {
          "type": "number",
          "description": "0:  Unknown, 1:  None, 2:  CLI, 3:  SNMP, 4:  TL1, 5:  CMIP, 6:  RMON, 7:  Proprietary"
        },
        "configText": {
          "type": "string"
        },
        "configBinary": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "configLocation": {
          "$ref": "Link"
        }
      }
    },
    "PhysicalPort": {
      "id": "PhysicalPort",
      "type": "object",
      "properties": {
        "duplexMode": {
          "type": "integer",
          "description": "0: Unknown, 1: Full Duplex, 2: Half Duplex"
        },
        "portNumber": {
          "type": "integer"
        },
        "typeOfPort": {
          "type": "integer",
          "description": "0: Unknown, 1: Ethernet, 2: FastEthernet, 3: Auto-Sensing, 4: GigabitEthernet, 5: FastGigabitEthernet, 6: DS-0, 7: DS-1, 8: DS-3, 9: T1, 10: T3, 11: E1, 12: E3, 13: OC-3, 14: OC-12, 15: OC-48, 16: OC-192, 17: RS-232C",
          "required": true
        },
        "vendorPortName": {
          "type": "string"
        },
        "ifType": {
          "type": "integer",
          "description": "0: Unknown, 1: 10BaseT, 2: 100BaseT, 3: 10-100BaseT, 4: 1000BaseT, 5: 10000BaseT, 6: DS-0, 7: DS-1, 8: DS-3, 9: OC-3, 10: OC-12, 11: OC-48, 12: OC-192",
          "required": true
        },
        "card": {
          "$ref": "CardSummary"
        },
        "configuration": {
          "$ref": "PhysicalPortConfig"
        }
      }
    },
    "CardSummary": {
      "id": "CardSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "cardType": {
          "type": "string"
        },
        "cardMemorySize": {
          "type": "number"
        },
        "numberOfPorts": {
          "type": "integer"
        }
      }
    },
    "Card": {
      "id": "Card",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "cardCompatibilityResults": {
          "type": "string"
        },
        "daughterCardInstallStatus": {
          "type": "integer",
          "description": "0: Not Applicable (doesn't have any DaughterCards), 1: All Daughter Cards are installed, 2: Some Daughter Cards are installed, 3: No Daughter Cards are installed, 9: Daughter Card status and capability unknown"
        },
        "daughterCardOperatingStatus": {
          "type": "integer",
          "description": "0: Not Applicable (doesn't have any DaughterCards), 1: All Daughter Cards are operating correctly, 2: Some Daughter Cards are operating incorrectly, 3: No Daughter Cards are operating correctly, 9: Status and operating characteristics of daughter cards unknown"
        },
        "daughterCardRequirements": {
          "type": "integer"
        },
        "isConfigurablePhysically": {
          "type": "boolean"
        },
        "isMotherBoard": {
          "type": "boolean"
        },
        "isUniquePhysical": {
          "type": "boolean"
        },
        "maxDataWidth": {
          "type": "integer"
        },
        "slotLayout": {
          "type": "string"
        },
        "slotsRequired": {
          "type": "integer"
        },
        "uniqueRequirementsPhysical": {
          "type": "string"
        },
        "hardwareVersion": {
          "type": "string"
        },
        "cardType": {
          "type": "string"
        },
        "distToBase": {
          "type": "string"
        },
        "distToFront": {
          "type": "string"
        },
        "distToLeft": {
          "type": "string"
        },
        "cardMemorySize": {
          "type": "number"
        },
        "numberOfPorts": {
          "type": "integer"
        },
        "slots": {
          "type": "array",
          "items": {
            "$ref": "Slot"
          }
        }
      }
    },
    "Port": {
      "id": "Port",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "isEdgePort": {
          "type": "boolean"
        },
        "usageState": {
          "type": "number"
        },
        "crcStatus": {
          "type": "number"
        },
        "physicalPort": {
          "$ref": "PhysicalPort"
        }
      }
    },
    "CMTSSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "commonName": {
          "type": "string"
        }
      }
    },
    "CMTS": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "commonName": {
          "type": "string"
        },
        "deviceActivationStatus": {
          "type": "object",
          "description": "Activation_Pending, Activated, Activation_Failed",
          "enum": ["Activation_Pending", "Activated", "Activation_Failed"]
        },
        "backplaneIndependent": {
          "type": "boolean"
        },
        "backplaneNumber": {
          "type": "integer"
        },
        "configurationOrder": {
          "type": "string"
        },
        "deviceGroupID": {
          "type": "string"
        },
        "isComposite": {
          "type": "boolean"
        },
        "canMixPower": {
          "type": "boolean"
        },
        "hasPowerManagement": {
          "type": "boolean"
        },
        "powerManagementCapabilities": {
          "type": "string"
        },
        "deviceProviderType": {
          "type": "object",
          "$ref": "DeviceProviderType"
        },
        "deviceManagementType": {
          "type": "object",
          "$ref": "DeviceManagementType"
        },
        "manufactureDate": {
          "type": "string"
        },
        "manufactureDateStamp": {
          "type": "string",
          "format": "date-time"
        },
        "otherIdentifier": {
          "type": "string"
        },
        "powerState": {
          "type": "integer",
          "description": "0: Unknown, 1: Not Applicable, 2: No Power Applied, 3: Full Power Applied, 4: Power Save - Normal, 5: Power Save - Degraded, 6: Power Save - Standby, 7: Power Save - Critical, 8: Power Save - Low Power Mode, 9: Power Save - Unknown, 10: Power Cycle, 11: Power Warning, 12: Power Off"
        },
        "serialNumber": {
          "type": "string"
        },
        "versionNumber": {
          "type": "string"
        },
        "usageState": {
          "type": "integer"
        },
        "clliCode": {
          "type": "object",
          "$ref": "CLLICode"
        },
        "assignedCableModems": {
          "type": "array",
          "items": {
            "$ref": "CMTSCableModemAssignment"
          }
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "CableModemChannel"
          }
        }
      }
    },
    "CMTSCableModemAssignment": {
      "type": "object",
      "properties": {
        "cmStatus": {
          "type": "integer",
          "description": "1 - other than below, 2 - ranging, 3 - ranging aborted, 4 - ranging complete, 5 - IP complete (IP Address DHCP-assigned), 6 - registration complete (aka operational), 7 - access denied, 8 - RESERVED, 9 - registered, BPI initialized"
        },
        "cmPreEqualized": {
          "type": "boolean"
        },
        "cableModem": {
          "type": "object",
          "$ref": "CableModemSummary"
        },
        "cmts": {
          "type": "object",
          "$ref": "CMTSSummary"
        }
      }
    },
    "UNIServiceSummary": {
      "id": "UNIServiceSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "UNIService": {
      "id": "UNIService",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "startMode": {
          "type": "number",
          "description": "0:  Unknown, 1:  Automatically by the managed environment, 2:  Automatically by the owning device, 3:  Manually by the Provider of the Service, 4:  Manually by a Customer of the Provider, 5:  Any of the above"
        },
        "isStateful": {
          "type": "boolean"
        },
        "isFCCReportable": {
          "type": "boolean"
        },
        "isTSP": {
          "type": "boolean"
        },
        "isResourceFacingService": {
          "type": "boolean"
        },
        "isCustomerFacingService": {
          "type": "boolean"
        },
        "rfsStatus": {
          "type": "number"
        },"cfsStatus": {
          "type": "number"
        },
        "customerFacingService": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceSummary"
          }
        },
        "resourceFacingService": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceSummary"
          }
        },
        "config": {
          "$ref": "UNIConfig"
        },
        "networkPath": {
          "$ref": "NetworkPath"
        },
        "evc": {
          "$ref": "EvcSummary"
        }
      }
    },
    "Changes": {
      "id": "Changes",
      "properties": {
        "change": {
          "type": "string"
        }
      }
    },
    "PortDeltas": {
      "id": "PortDeltas",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "Changes"
          }
        },
        "resourcePortConfiguration": {
          "$ref": "PortConfiguration"
        },
        "currentPort": {
          "$ref": "Port"
        }
      }
    },
    "EthernetInterfaceConfiguration": {
      "id": "EthernetInterfaceConfiguration",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "customerInterfaceNumber": {
          "type": "number"
        },
        "deviceConfigMethod": {
          "type": "string",
          "description": "0 - not configured, 1 - using the CONSOLE port, 2 - using the AUXILIARY port, 3 - using a virtual terminal interface, 4 - download through a TFTP server, 5 - download through an FTP server, 6 - download through a NMS"
        },
        "hasCarrierDetect": {
          "type": "boolean"
        },
        "hasDataLink": {
          "type": "boolean"
        },
        "isInterfaceEnabled": {
          "type": "boolean"
        },
        "vendorInterfaceNumber": {
          "type": "number"
        },
        "interfaceInitResetCount": {
          "type": "number"
        },
        "syncLostCount": {
          "type": "number"
        },
        "ethernetInterface": {
          "type": "object",
          "items": {
            "$ref": "EthernetInterfaceSummary"
          }
        }
      }
    },
    "EthernetInterfaceDeltas": {
      "id": "EthernetInterfaceDeltas",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "ethernetInterfaceConfiguration": {
          "$ref": "EthernetInterfaceConfiguration"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "Changes"
          }
        }
      }
    },
    "AssignedGroup": {
      "id": "AssignedGroup",
      "type": "object",
      "properties": {
        "assignedStart": {
          "type": "string",
          "format": "date-time"
        },
        "assignedEnd": {
          "type": "string",
          "format": "date-time"
        },
        "userGroups": {
          "type": "object",
          "$ref": "UserGroup"
        }
      }
    },
    "TaskList": {
      "id": "TaskList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available tasks in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of tasks returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of tasks in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned tasks in this collection.",
          "items": {
            "$ref": "TicketSummary"
          }
        }
      }
    },
    "TicketList": {
      "id": "TicketList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available tickets in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of tickets returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of tickets in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned tickets in this collection.",
          "items": {
            "$ref": "TicketSummary"
          }
        }
      }
    },
    "TicketSummary": {
      "id": "TicketSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Master, Primary, Subtask",
          "enum": [
            "Master",
            "Primary",
            "Subtask"
          ]
        },
        "status": {
          "type": "string"
        },
        "detailDescription": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        }
      }
    },
    "Ticket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Master, Primary, Subtask",
          "enum": ["Master", "Primary", "Subtask"]
        },
        "status": {
          "type": "string"
        },
        "detailDescription": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "universalIdentifier": {
          "type": "string"
        },
        "originatingSystem": {
          "type": "string"
        },
        "originatingTicketId": {
          "type": "string"
        },
        "impact": {
          "type": "string"
        },
        "interactionStatus": {
          "type": "string"
        },
        "interactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "interactionDateComplete": {
          "type": "string",
          "format": "date-time"
        },
        "createDate": {
          "type": "string",
          "format": "date-time"
        },
        "relatedTo": {
          "type": "array",
          "items": {
            "$ref": "TicketRelationship"
          }
        },
        "primaryTicket": {
          "$ref": "TicketSummary"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "TicketSummary"
          }
        },
        "assignedGroup": {
          "type": "object",
          "$ref": "AssignedGroup"
        },
        "externalSystemReference": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ExternalSystemReference"
          }
        },
        "category": {
          "type": "object",
          "$ref": "Category"
        },
        "submitter": {
          "type": "object",
          "$ref": "UserSummary"
        },
        "assignee": {
          "type": "object",
          "$ref": "UserSummary"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Modifier"
          }
        },
        "watchers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Watcher"
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Comment"
          }
        },
        "statusEntries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "StatusEntry"
          }
        },
        "characteristics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Characteristic"
          }
        },
        "contacts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Contact"
          }
        },
        "impactedItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ImpactedItem"
          }
        },
        "location": {
          "type": "object",
          "$ref": "TicketLocation"
        },
        "relatedFrom": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "TicketRelationship"
          }
        }
      }
    },
    "ModifierList": {
      "id": "ModifierList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available modifiers in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of modifiers returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of modifiers in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned modifiers in this collection.",
          "items": {
            "$ref": "Modifier"
          }
        }
      }
    },
    "Modifier": {
      "id": "Modifier",
      "type": "object",
      "properties": {
        "modifiedTime": {
          "type": "string",
          "$ref": "date-time"
        },
        "user": {
          "type": "object",
          "$ref": "UserSummary"
        }
      }
    },
    "WatcherList": {
      "id": "WatcherList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available watchers in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of watchers returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of watchers in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned watchers in this collection.",
          "items": {
            "$ref": "Watcher"
          }
        }
      }
    },
    "Watcher": {
      "type": "object",
      "properties": {
        "watchStart": {
          "type": "string",
          "format": "date-time"
        },
        "watchEnd": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "type": "object",
          "$ref": "UserSummary"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "subCategory": {
          "type": "object",
          "$ref": "Category"
        }
      }
    },
    "TicketLocationList": {
      "id": "TicketLocationList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available locations in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of locations returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of locations in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned locations in this collection.",
          "items": {
            "$ref": "TicketLocation"
          }
        }
      }
    },
    "TicketLocation": {
      "id": "TicketLocation",
      "type": "object",
      "properties": {
        "sites": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Site"
          }
        },
        "id": {
          "type": "string"
        },
        "unnamed_Ticket_": {
          "type": "object",
          "$ref": "Ticket",
          "required": true
        },
        "cableServiceArea": {
          "type": "object",
          "$ref": "CableServiceArea",
          "required": true
        },
        "link": {
          "type": "object",
          "$ref": "Link",
          "required": true
        },
        "marketArea": {
          "type": "object",
          "$ref": "MarketArea",
          "required": true
        }
      }
    },
    "TicketRelationship": {
      "type": "object",
      "properties": {
        "relationshipType": {
          "type": "object",
          "$ref": "TicketRelationshipType",
          "required": true
        },
        "validFor": {
          "type": "object",
          "$ref": "TimePeriod",
          "required": true
        },
        "relatedTicket": {
          "type": "object",
          "$ref": "Ticket",
          "required": true
        },
        "tickets": {
          "type": "object",
          "$ref": "Ticket",
          "required": true
        }
      }
    },
    "Tickets": {
      "type": "object",
      "properties": {
        "tickets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Ticket"
          }
        }
      }
    },
    "TimeZoneRegion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "timeZoneCode": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link",
          "required": true
        },
        "timeZoneName": {
          "type": "string"
        },
        "geometry": {
          "type": "object",
          "$ref": "Geometry",
          "required": true
        }
      }
    },
    "ImpactedItem": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ticket": {
          "$ref": "TicketSummary"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "AccountSummary"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "ServiceSummary"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "ResourceSummary"
          }
        }
      }
    },
    "ServiceSpecificationSummary": {
      "id": "ServiceSpecificationSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        }
      }
    },
    "ServiceSpecification": {
      "id": "ServiceSpecification",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "isCustomerFacing": {
          "type": "boolean"
        },
        "isResourceFacing": {
          "type": "boolean"
        },
        "isComposedOf": {
          "type": "array",
          "items": {
            "$ref": "ServiceSpecificationSummary"
          }
        },
        "customerFacingServiceSpec": {
          "type": "array",
          "items": {
            "$ref": "ServiceSpecificationSummary"
          }
        },
        "resourceFacingServiceSpec": {
          "type": "array",
          "items": {
            "$ref": "ServiceSpecificationSummary"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "ServiceSummary"
          }
        },
        "characteristics": {
          "type": "array",
          "items": {
            "$ref": "Characteristic"
          }
        },
        "serviceSpecificationTypes": {
          "$ref": "ServiceSpecificationType"
        }
      }
    },
    "ServiceSpecificationType": {
      "id": "ServiceSpecificationType",
      "type": "object",
      "properties": {
        "serviceSpecTypeName": {
          "type": "string"
        }
      }
    },
    "ConfigurationData": {
      "id": "ConfigurationData",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "mgmtInfoValidFor": {
          "$ref": "TimePeriod"
        },
        "retrievalMethodCurrent": {
          "type": "integer",
          "description": "0:  Unknown, 1:  None, 2:  CLI, 3:  SNMP, 4:  TL1, 5:  CMIP, 6:  RMON, 7:  Proprietary"
        },
        "retrievalMethodsSupported": {
          "type": "string",
          "description": "0:  Unknown, 1:  None, 2:  CLI, 3:  SNMP, 4:  TL1, 5:  CMIP, 6:  RMON, 7:  Proprietary"
        },
        "configText": {
          "type": "string"
        },
        "configBinary": {
          "$ref": "integer"
        },
        "configLocation": {
          "$ref": "Link"
        },
        "service": {
          "$ref": "ServiceSummary"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "ResourceSummary"
          }
        },
        "serviceConfiguration": {
          "$ref": "ServiceConfigurationSummary"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "AttributeValuePair"
          }
        },
        "specification": {
          "$ref": "ConfigurationDataSpecification"
        }
      }
    },
    "ConfigurationDataSpecification": {
      "id": "ConfigurationDataSpecification",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AttributeValuePair": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        }
      }
    },
    "ServiceSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "isCustomerFacing": {
          "type": "boolean"
        },
        "isResourceFacing": {
          "type": "boolean"
        },
        "isComposedOf": {
          "type": "array",
          "items": {
            "$ref": "ServiceSpecification"
          }
        },
        "customerFacingServiceSpec": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ServiceSpecification"
          }
        },
        "resourceFacingServiceSpec": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ServiceSpecification"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "ServiceSummary"
          }
        },
        "characteristics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Characteristic"
          }
        },
        "serviceSpecificationTypes": {
          "type": "object",
          "$ref": "ServiceSpecificationType"
        }
      }
    },
    "ServiceSpecificationType": {
      "type": "object",
      "properties": {
        "serviceSpecTypeName": {
          "type": "string"
        }
      }
    },
    "ServiceSummary": {
      "id": "ServiceSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        }
      }
    },
    "Service": {
      "id": "Service",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "hasStarted": {
          "type": "boolean"
        },
        "isServiceEnabled": {
          "type": "boolean"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "startMode": {
          "type": "integer",
          "description": "0:  Unknown, 1:  Automatically by the managed environment, 2:  Automatically by the owning device, 3:  Manually by the Provider of the Service, 4:  Manually by a Customer of the Provider, 5:  Any of the above"
        },
        "isStateful": {
          "type": "boolean"
        },
        "isFCCReportable": {
          "type": "boolean"
        },
        "isTSP": {
          "type": "boolean"
        },
        "isResourceFacingService": {
          "type": "boolean"
        },
        "isCustomerFacingService": {
          "type": "boolean"
        },
        "rfsStatus": {
          "type": "integer"
        },
        "cfsStatus": {
          "type": "integer"
        },
        "serviceSpecification": {
          "$ref": "ServiceSpecificationSummary"
        },
        "tickets": {
          "type": "array",
          "items": {
            "$ref": "ImpactedItem"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "ResourceSummary"
          }
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "ProductSummary"
          }
        },
        "customerFacingService": {
          "type": "array",
          "items": {
            "$ref": "ServiceSummary"
          }
        },
        "resourceFacingService": {
          "type": "array",
          "items": {
            "$ref": "ServiceSummary"
          }
        },
        "sites": {
          "type": "array",
          "items": {
            "$ref": "SiteSummary"
          }
        },
        "characterisitcs": {
          "type": "array",
          "items": {
            "$ref": "Characteristic"
          }
        },
        "prefereneces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Preference"
          }
        },
        "configurationDatas": {
          "type": "array",
          "items": {
            "$ref": "ConfigurationData"
          }
        },
        "device": {
          "$ref": "DeviceSummary"
        },
        "productProperties": {
          "$ref": "ProductProperties"
        }
      }
    },
    "Resource": {
    },
    "UNIServiceDeltas": {
      "id": "UNIServiceDeltas",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "Changes"
          }
        },
        "uniServiceConfiguration": {
          "$ref": "UNIServiceConfigurationSummary"
        },
        "currentUniService": {
          "$ref": "UNIServiceSummary"
        }
      }
    },
    "EVCServiceDeltas": {
      "id": "EVCServiceDeltas",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "uniServiceConfiguration": {
          "$ref": "EVCServiceConfiguration"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "Changes"
          }
        }
      }
    },
    "Services": {
      "id": "Services",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "uniServiceDeltas": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceDeltas"
          }
        },
        "evcServiceDeltas": {
          "type": "array",
          "items": {
            "$ref": "EVCServiceDeltas"
          }
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "Changes"
          }
        }
      }
    },
    "Resources": {
      "type": "object",
      "properties": {
        "ethernetInterfaceDeltas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "EthernetInterfaceDeltas"
          }
        },
        "resourcePortDeltas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "PortDeltas"
          }
        }
      }
    },
    "ServiceSummary": {
      "id": "ServiceSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        }
      }
    },
    "OrderDesign": {
      "id": "OrderDesign",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "designArtifact": {
          "$ref": "Link"
        },
        "serviceDesign": {
          "$ref": "Services"
        },
        "resourceDesign": {
          "$ref": "Resources"
        }
      }
    },
    "Slot": {
      "id": "Slot",
      "type": "object",
      "properties": {
        "hasAdapter": {
          "type": "boolean"
        },
        "slotNumber": {
          "type": "integer"
        },
        "slotPurpose": {
          "type": "integer",
          "description": "0: Unknown, 1: System, 2: Networking, 3: Port Adapter, 4: Memory, 5: Hardware Assist, 6: Video, 7: General Computing, 8: General Purpose"
        },
        "purposeDescription": {
          "type": "string"
        },
        "card": {
          "$ref": "CardSummary"
        }
      }
    },
    "DeviceSummary": {
      "id": "DeviceSummary",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "macAddress": {
          "type": "string"
        }
      }
    },
    "Device": {
      "id": "Device",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "managementMethodCurrent": {
          "type": "number"
        },
        "managementMethodSupported": {
          "type": "number"
        },
        "usageState": {
          "type": "number"
        },
        "macAddress": {
          "type": "string"
        },
        "clliCode": {
          "type": "string"
        },
        "manufactureDateStamp": {
          "type": "date"
        },
        "otherIdentifier": {
          "type": "string"
        },
        "powerState": {
          "type": "number"
        },
        "serialNumber": {
          "type": "string"
        },
        "versionNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "hostName": {
          "type": "string"
        },
        "ownedBy": {
          "$ref": "Customer"
        },
        "characteristics": {
          "type": "array",
          "items": {
            "$ref": "Characteristic"
          }
        },
        "slot": {
          "$ref": "Slot"
        }
      }
    },
    "ResourceOrder": {
      "id": "ResourceOrder",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string"
        },
        "interactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "interactionDateComplete": {
          "type": "string",
          "format": "date-time"
        },
        "interactionStatus": {
          "type": "string"
        },
        "device": {
          "$ref": "DeviceSummary"
        },
        "newSite": {
          "$ref": "SiteSummary"
        },
        "ethernetInterfaces": {
          "type": "array",
          "items": {
            "$ref": "EthernetInterfaceSummary"
          }
        },
        "orderDesign": {
          "$ref": "OrderDesign"
        }
      }
    },
    "AppliedCustomerBillingRateSpec": {
      "id": "AppliedCustomerBillingRateSpec",
      "type": "object",
      "properties": {

      }
    },
    "AppliedCustomerBillingVideoUsageRate": {
      "id": "AppliedCustomerBillingVideoUsageRate",
      "type": "object",
      "properties": {
        "isAdultContent": {
          "type": "boolean"
        },
        "videoUsageType": {
          "type": "string",
          "description": "VIDEO_ON_DEMAND, PAY_PER_VIEW"
        }
      }
    },
    "AppliedCustomerBillingTelephoneUsageRate": {
      "id": "AppliedCustomerBillingTelephoneUsageRate",
      "type": "object",
      "properties": {
        "calledNumber": {
          "type": "string"
        },
        "callingNumber": {
          "type": "string"
        },
        "callDuration": {
          "type": "string"
        },
        "appliedRate": {
          "type": "string"
        },
        "telephoneUsageType": {
          "type": "string",
          "description": "LONG_DISTANCE, DIRECTORY_ASSISTANCE, COLLECT, THIRD_PARTY, AT_LONG_DISTANCE"
        },
        "callDestination": {
          "type": "string"
        },
        "callDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AppliedCustomerBillingTaxRate": {
      "id": "AppliedCustomerBillingTaxRate",
      "type": "object",
      "properties": {
        "customerTaxId": {
          "type": "string"
        },
        "taxType": {
          "type": "string"
        },
        "taxCategory": {
          "type": "string"
        }
      }
    },
    "RecurringAppliedCustomerBillingProductCharge": {
      "id": "RecurringAppliedCustomerBillingProductCharge",
      "type": "object",
      "properties": {
        "recurringChargeFromDate": {
          "type": "string",
          "format": "date-time"
        },
        "recurringChargeThroughDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OneTimeAppliedCustomerBillingProductCharge": {
      "id": "OneTimeAppliedCustomerBillingProductCharge",
      "type": "object",
      "properties": {
        "oneTimeChargeType": {
          "type": "string"
        }
      }
    },
    "AppliedCustomerBillingRefund": {
      "id": "AppliedCustomerBillingRefund",
      "type": "object",
      "properties": {
        "refundType": {
          "type": "string",
          "description": "Cash, CreditCard"
        }
      }
    },
    "AppliedCustomerBillingAdjustment": {
      "id": "AppliedCustomerBillingAdjustment",
      "type": "object",
      "properties": {
        "adjustmentFromDate": {
          "type": "string",
          "format": "date-time"
        },
        "adjustmentThroughDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BillChargeSummary": {
      "id": "BillChargeSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "rateAmount": {
          "$ref": "Money"
        },
        "rateDescription": {
          "type": "string"
        },
        "billingRateCode": {
          "type": "string"
        },
        "account": {
          "$ref": "AccountSummary"
        },
        "customerBill": {
          "$ref": "CustomerBillSummary"
        }
      }
    },
    "BillCharge": {
      "id": "BillCharge",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "rateAmount": {
          "$ref": "Money"
        },
        "rateDescription": {
          "type": "string"
        },
        "billingRateCode": {
          "type": "string"
        },
        "account": {
          "$ref": "AccountSummary"
        },
        "customerBill": {
          "$ref": "CustomerBillSummary"
        },
        "paymentItem": {
          "$ref": "PaymentItemSummary"
        },
        "appliedCustomerBillingRateSpec": {
          "$ref": "AppliedCustomerBillingRateSpec"
        },
        "appliedCustomerBillingVideoUsageRate": {
          "$ref": "AppliedCustomerBillingVideoUsageRate"
        },
        "appliedCustomerBillingTelephoneUsageRate": {
          "$ref": "AppliedCustomerBillingTelephoneUsageRate"
        },
        "appliedCustomerBillingTaxRate": {
          "$ref": "AppliedCustomerBillingTaxRate"
        },
        "recurringAppliedCustomerBillingProductCharge": {
          "$ref": "RecurringAppliedCustomerBillingProductCharge"
        },
        "oneTimeAppliedCustomerBillingProductCharge": {
          "$ref": "OneTimeAppliedCustomerBillingProductCharge"
        },
        "appliedCustomerBillingRefund": {
          "$ref": "AppliedCustomerBillingRefund"
        },
        "appliedCustomerBillingAdjustment": {
          "$ref": "AppliedCustomerBillingAdjustment"
        }
      }
    },
    "CableServiceArea": {
      "id": "CableServiceArea",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "code": {
          "type": "string"
        },
        "geometry": {
          "$ref": "Geometry"
        }
      }
    },
    "GeographicAddress": {
      "id": "GeographicAddress",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "postalcode": {
          "type": "string"
        },
        "state_province": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "locality": {
          "type": "string"
        },
        "formattedAddressLine2": {
          "type": "string"
        },
        "formattedAddressLine1": {
          "type": "string"
        },
        "postalContacts": {
          "type": "array",
          "items": {
            "$ref": "PostalContact"
          }
        },
        "country": {
          "type": "string"
        }
      }
    },
    "CommentList": {
      "id": "CommentList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available issues in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of issues returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of comments in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned comments in this collection.",
          "items": {
            "$ref": "Comment"
          }
        }
      }
    },
    "Comment": {
      "id": "Comment",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "description": {
          "type": "string",
          "decription": "The content of the Comment."
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "visibility": {
          "type": "string"
        },
        "submitter": {
          "$ref": "UserSummary"
        }
      }
    },
    "CustomerBillSummary": {
      "id": "CustomerBillSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "billNo": {
          "type": "string"
        },
        "billAmount": {
          "$ref": "Money"
        },
        "billDate": {
          "type": "string",
          "format": "date-time"
        },
        "paymentDueDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CustomerBill": {
      "id": "CustomerBill",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "billNo": {
          "type": "string"
        },
        "billAmount": {
          "$ref": "Money"
        },
        "billDate": {
          "type": "string",
          "format": "date-time"
        },
        "chargeDate": {
          "type": "string",
          "format": "date-time"
        },
        "creditDate": {
          "type": "string",
          "format": "date-time"
        },
        "mailingDate": {
          "type": "string",
          "format": "date-time"
        },
        "paymentDueDate": {
          "type": "string",
          "format": "date-time"
        },
        "billCharges": {
          "type": "array",
          "items": {
            "$ref": "BillChargeSummary"
          }
        },
        "document": {
          "$ref": "Document"
        },
        "financialCharges": {
          "type": "array",
          "items": {
            "$ref": "FinancialCharge"
          }
        },
        "customerBillSpec": {
          "$ref": "CustomerBillSpecSummary"
        },
        "account": {
          "$ref": "AccountSummary"
        },
        "paymentItems": {
          "type": "array",
          "items": {
            "$ref": "PaymentItemSummary"
          }
        }
      }
    },
    "FinancialCharge": {
      "type": "object"
    },
    "BillingPeriod": {
      "id": "BillingPeriod",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CustomerBillingCycleSpecification": {
      "id": "CustomerBillingCycleSpecification",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "billingDateShift": {
          "type": "integer"
        },
        "chargeDateOffset": {
          "type": "integer"
        },
        "creditDateOffset": {
          "type": "integer"
        },
        "mailingDateOffset": {
          "type": "integer"
        },
        "paymentDueDateOffset": {
          "type": "integer"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "customerBillSpecs": {
          "type": "array",
          "items": {
            "$ref": "CustomerBillSpecSummary"
          }
        },
        "billingPeriod": {
          "$ref": "BillingPeriod"
        }
      }
    },
    "CustomerBillPresentationMedia": {
      "id": "CustomerBillPresentationMedia",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CustomerBillFormat": {
      "id": "CustomerBillFormat",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "presentationMedia": {
          "type": "array",
          "items": {
            "$ref": "CustomerBillPresentationMedia"
          }
        }
      }
    },
    "CustomerBillSpecSummary": {
      "id": "CustomerBillSpecSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "format": {
          "type": "array",
          "items": {
            "$ref": "CustomerBillFormat"
          }
        }
      }
    },
    "CustomerBillSpec": {
      "id": "CustomerBillSpec",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "customerBills": {
          "type": "array",
          "items": {
            "$ref": "CustomerBillSummary"
          }
        },
        "format": {
          "type": "array",
          "items": {
            "$ref": "CustomerBillFormat"
          }
        },
        "account": {
          "$ref": "AccountSummary"
        },
        "customerBillingCycleSpecifications": {
          "type": "array",
          "items": {
            "$ref": "CustomerBillingCycleSpecification"
          }
        }
      }
    },
    "CustomerPaymentSummary": {
      "id": "CustomerPaymentSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "paymentConfirmation": {
          "type": "string"
        },
        "amount": {
          "$ref": "Money"
        },
        "remainingAmount": {
          "$ref": "Money"
        },
        "paymentDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CustomerPayment": {
      "id": "CustomerPayment",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "paymentConfirmation": {
          "type": "string"
        },
        "amount": {
          "$ref": "Money"
        },
        "remainingAmount": {
          "$ref": "Money"
        },
        "paymentDate": {
          "type": "string",
          "format": "date-time"
        },
        "paymentItems": {
          "type": "array",
          "items": {
            "$ref": "PaymentItemSummary"
          }
        },
        "paymentMethods": {
          "type": "array",
          "items": {
            "$ref": "PaymentMethod"
          }
        }
      }
    },
    "Document": {
      "id": "Document",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "documentLocation": {
          "type": "string"
        },
        "documentNumber": {
          "type": "string"
        }
      }
    },
    "EmailContact": {
      "id": "EmailContact",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "emailAddress": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "preferred": {
          "type": "boolean"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "FaxNumber": {
      "id": "FaxNumber",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "type": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "PartySummary": {
      "id": "PartySummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Individual": {
      "id": "Individual",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "preferredName": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "placeOfBirth": {
          "type": "string"
        },
        "skills": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "description": "Male, Female"
        },
        "maritalStatus": {
          "type": "string",
          "description": "Single, Married"
        },
        "disabilities": {
          "description": "Vision_Impaired, Hearing_Impaired, Other"
        },
        "aliveDuring": {
          "$ref": "TimePeriod"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "identificationDetails": {
          "type": "array",
          "items": {
            "$ref": "IndividualIdentification"
          }
        },
        "alternateNames": {
          "type": "array",
          "items": {
            "$ref": "IndividualName"
          }
        },
        "individualName": {
          "$ref": "IndividualName"
        }
      }
    },
    "IndividualIdentification": {
      "id": "IndividualIdentification",
      "type": "object",
      "properties": {
        "identification": {
          "oneOf": [
            {"$ref": "StateIdentification"},
            {"$ref": "StudentIdentification"},
            {"$ref": "PassportIdentification"},
            {"$ref": "ContractorIdentification"},
            {"$ref": "DriversLicenseIdentification"},
            {"$ref": "BirthCertificateIdentification"},
            {"$ref": "NationalIdentityCardIdentification"},
            {"$ref": "SocialInsuranceIdentification"},
            {"$ref": "ProvincialIdentification"},
            {"$ref": "EmployeeIdentification"},
            {"$ref": "MedicalHealthCardIdentification"},
            {"$ref": "MembershipCardIdentification"},
            {"$ref": "SocialSecurityNrIdentification"},
            {"$ref": "AlternateIdentification"}
          ]
        }
      }
    },
    "IndividualName": {
      "id": "IndividualName",
      "type": "object",
      "properties": {
        "legalName": {
          "type": "string"
        },
        "familyNames": {
          "type": "string"
        },
        "qualifications": {
          "type": "string"
        },
        "formOfAddress": {
          "type": "string"
        },
        "givenNames": {
          "type": "string"
        },
        "aristocraticTitle": {
          "type": "string"
        },
        "familyGeneration": {
          "type": "string"
        },
        "preferredGivenName": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "formattedName": {
          "type": "string"
        },
        "generation": {
          "type": "string"
        },
        "middleNames": {
          "type": "string"
        },
        "familyNamePrefix": {
          "type": "string"
        }
      }
    },
    "OrganizationSummary": {
      "id": "OrganizationSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "id": "Organization",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "isLegalEntity": {
          "type": "boolean"
        },
        "existsDuring": {
          "$ref": "TimePeriod"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "identificationDetails": {
          "type": "array",
          "items": {
            "$ref": "OrganizationIdentification"
          }
        },
        "alternateNames": {
          "type": "array",
          "items": {
            "$ref": "OrganizationName"
          }
        },
        "organizationName": {
          "$ref": "OrganizationName"
        }
      }
    },
    "OrganizationIdentification": {
      "id": "OrganizationIdentification",
      "type": "object",
      "properties": {
        "identification" : {
          "type": "object",
          "oneOf": [
            { "$ref": "CompanyRegistration"},
            { "$ref": "TaxIdentification"}
          ]
        }
      }
    },
    "OrganizationName": {
      "id": "OrganizationName",
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string"
        },
        "tradingName": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "nameType": {
          "type": "string"
        }
      }
    },
    "PaymentItemSummary": {
      "id": "PaymentItemSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "appliedAmount": {
          "$ref": "Money"
        }
      }
    },
    "PaymentItem": {
      "id": "PaymentItem",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "appliedAmount": {
          "$ref": "Money"
        },
        "customerBill": {
          "$ref": "CustomerBillSummary"
        },
        "billCharge": {
          "$ref": "BillChargeSummary"
        },
        "customerPayment": {
          "$ref": "CustomerPaymentSummary"
        }
      }
    },
    "PaymentMethodSummary": {
      "id": "PaymentMethod",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "paymentMethodName": {
          "type": "string"
        },
        "paymentDescription": {
          "type": "string"
        }
      }
    },
    "PaymentMethod": {
      "id": "PaymentMethod",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "paymentMethodName": {
          "type": "string"
        },
        "paymentDescription": {
          "type": "string"
        },
        "customerPayment": {
          "type": "array",
          "items": {
            "$ref": "CustomerPaymentSummary"
          }
        },
        "paymentPlan": {
          "type": "array",
          "items": {
            "$ref": "PaymentPlanSummary"
          }
        },
        "paymentCard": {
          "$ref": "PaymentCard"
        },
        "tokenizedThirdParty": {
          "$ref": "TokenizedThirdParty"
        },
        "tokenizedPaymentCard": {
          "$ref": "TokenizedPaymentCard"
        },
        "fundsTransfer": {
          "$ref": "FundsTransfer"
        },
        "cash": {
          "$ref": "Cash"
        },
        "check": {
          "$ref": "Check"
        }
      }
    },
    "PaymentPlanSummary": {
      "id": "PaymentPlanSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "priority": {
          "type": "integer"
        },
        "status": {
          "type": "boolean"
        },
        "paymentPlanType": {
          "$ref": "PaymentPlanType"
        },
        "paymentLimit": {
          "$ref": "Money"
        }
      }
    },
    "PaymentPlan": {
      "id": "PaymentPlan",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "priority": {
          "type": "integer"
        },
        "status": {
          "type": "boolean"
        },
        "paymentPlanType": {
          "$ref": "PaymentPlanType"
        },
        "paymentLimit": {
          "$ref": "Money"
        },
        "paymentMethod": {
          "$ref": "PaymentMethodSummary"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "AccountSummary"
          }
        }
      }
    },
    "PostalContact": {
      "id": "PostalContact",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "type": {
          "type": "string"
        },
        "additionalDeliveryDetail": {
          "type": "string"
        },
        "propertyAddress": {
          "$ref": "PropertyAddress"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "Preference": {
      "id": "Preference",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "preferenceName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "unitOfMeasure": {
          "type": "string"
        },
        "rangeInterval": {
          "type": "string"
        },
        "specCharacteristicName": {
          "type": "string"
        },
        "specCharacteristicDescription": {
          "type": "string"
        },
        "valueType": {
          "type": "string"
        },
        "characteristicSequence": {
          "type": "integer"
        },
        "isSet": {
          "type": "boolean"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "preferences": {
          "type": "array",
          "items": {
            "$ref": "PreferenceSummary"
          }
        },
        "preferenceCategory": {
          "$ref": "PreferenceCategory"
        }
      }
    },
    "PreferenceSummary": {
      "id": "PreferenceSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "preferenceName": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "unitOfMeasure": {
          "type": "string"
        },
        "valueType": {
          "type": "string"
        },
        "isSet": {
          "type": "boolean"
        },
        "preferenceCategory": {
          "$ref": "PreferenceCategory"
        }
      }
    },
    "PreferenceCategory": {
      "id": "PreferenceCategory",
      "type": "object",
      "properties": {
        "preferenceCategoryName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preferenceCategoryId": {
          "type": "string"
        }
      }
    },
    "ProductSummary": {
      "id": "ProductSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        }
      }
    },
    "Product": {
      "id": "Product",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        },
        "productPrices": {
          "type": "array",
          "items": {
            "$ref": "Price"
          }
        },
        "relatedProducts": {
          "type": "array",
          "items": {
            "$ref": "ProductRelationship"
          }
        },
        "productSpecification": {
          "$ref": "ProductSpecificationSummary"
        },
        "productOffering": {
          "$ref": "ProductOfferingSummary"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "ServiceSummary"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "DeviceSummary"
          }
        },
        "currentLocation": {
          "type" : "object",
          "$ref": "SiteSummary"
        },
        "locationHistory": {
          "type" : "array",
          "items": {
            "$ref": "SiteSummary"
          }
        },
        "documentation": {
          "type": "object",
          "$ref": "Document"
        },
        "entitlements": {
          "type": "array",
          "items": {
            "$ref": "EntitlementGrant"
          }
        }
      }
    },
    "EntitlementGrant": {
      "id": "EntitlementGrant",
      "type": "object",
      "properties": {
        "grantId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "validFor": {
          "type": "object",
          "$ref": "TimePeriod"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "ProductRelationship": {
      "id": "ProductRelationship",
      "type": "object",
      "properties": {
        "relationshipType": {
          "type": "string"
        },
        "product": {
          "$ref": "ProductSummary"
        }
      }
    },
    "AccountProductAssignment": {
      "type": "object",
      "properties": {
        "involventType": {
          "type": "string"
        },
        "account": {
          "$ref": "AccountSummary"
        },
        "product": {
          "$ref": "ProductSummary"
        }
      }
    },
    "ProductProperties": {
      "id": "ProductProperties",
      "type": "object",
      "properties": {
        "service": {
          "$ref": "ServiceSummary"
        }
      }
    },
    "ProductOffering": {
      "id": "ProductOffering",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "object",
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "validFor": {
          "type": "object",
          "$ref": "TimePeriod"
        },
        "offeringPrice": {
          "type": "object",
          "$ref": "Price"
        }
      }
    },
    "ProductPriceSummary": {
      "id": "ProductPriceSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "Alteration": {
      "id": "ProdPriceCharge",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "$ref": "Money"
        },
        "priceType": {
          "type": "string"
        },
        "quantity": {
          "$ref": "Quantity"
        },
        "period": {
          "type": "string"
        }
      }
    },
    "Charge": {
      "id": "ProdPriceCharge",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "$ref": "Money"
        },
        "priceType": {
          "type": "string"
        },
        "quantity": {
          "$ref": "Quantity"
        },
        "period": {
          "type": "string"
        },
        "alterations": {
          "type": "array",
          "items": {
            "$ref": "Alteration"
          }
        }
      }
    },
    "Price": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "charges": {
          "type": "array",
          "items": {
            "$ref": "Charge"
          }
        }
      }
    },
    "EPLProductConfigurationSummary": {
      "id": "EPLProductConfigurationSummary",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        }
      }
    },
    "EPLProductConfiguration": {
      "id": "EPLProductConfiguration",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "productStatus": {
          "type": "string"
        },
        "productSerialNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "EPLProductConfigurationSummary"
          }
        },
        "productRelationships": {
          "type": "array",
          "items": {
            "$ref": "ProductRelationship"
          }
        },
        "productPrices": {
          "type": "array",
          "items": {
            "$ref": "ProductPriceSummary"
          }
        },
        "customerAccountInvolvements": {
          "type": "array",
          "items": {
            "$ref": "AccountProductAssignment"
          }
        },
        "productSpecification": {
          "$ref": "ProductSpecificationSummary"
        },
        "productOffering": {
          "$ref": "ProductOfferingSummary"
        },
        "uni": {
          "type": "array",
          "items": {
            "$ref": "UNIServiceConfigurationSummary"
          }
        },
        "evc": {
          "$ref": "EVCServiceConfigurationSummary"
        },
        "configuration": {
          "$ref": "EPLConfigurationSummary"
        },
        "eplProduct": {
          "$ref": "EPLProductSummary"
        }
      }
    },

    "ComponentPrice": {
      "type": "object",
      "properties": {
        "priceType": {
          "type": "string"
        },
        "unitOfMeasure": {
          "$ref": "Quantity"
        },
        "price": {
          "$ref": "Money"
        }
      }
    },
    "StatusEntryList": {
      "id": "StatusEntryList",
      "type": "object",
      "properties": {
        "available": {
          "type": "integer",
          "description": "The number of total available status entries in this list. Will always be greater than or equal to the \"returned\" value."
        },
        "returned": {
          "type": "integer",
          "description": "The number of status entries returned in this collection (up to 20)."
        },
        "collectionURI": {
          "type": "string",
          "description": "The path to the full list of status entries in this collection."
        },
        "items": {
          "type": "array",
          "description": "The list of returned status entries in this collection.",
          "items": {
            "$ref": "Modifier"
          }
        }
      }
    },
    "StatusEntry": {
      "id": "StatusEntry",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "priorState": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "submitter": {
          "$ref": "UserSummary"
        }
      }
    },
    "SystemContact": {
      "id": "SystemContact",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "type": {
          "type": "string"
        },
        "contactNotificationMethod": {
          "type": "string"
        },
        "contactNotificationID": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "TelephoneNumber": {
      "id": "TelephoneNumber",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "type": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "UserSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "profile": {
          "$ref": "PartySummary"
        }
      }
    },
    "User": {
      "id": "User",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "profile": {
          "$ref": "PartySummary"
        },
        "contactPhones": {
          "type": "array",
          "items": {
            "$ref": "TelephoneNumber"
          }
        },
        "contactEmails": {
          "type": "array",
          "items": {
            "$ref": "EmailContact"
          }
        },
        "primaryAccount": {
          "$ref": "AccountSummary"
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "AccountSummary"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "DeviceSummary"
          }
        },
        "interactions": {
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        },
        "transitions": {
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        },
        "userCredentials": {
          "type": "array",
          "items": {
            "$ref": "UserCredential"
          }
        }
      }
    },
    "UserCredential": {
      "id": "UserCredential",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "type": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userAccountController": {
          "type": "string"
        },
        "placeOfBirth": {
          "type": "string"
        },
        "userCredentialCategory": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "adminStatus": {
          "type": "string",
          "description": "Active, Suspended, Inactive, Closed"
        },
        "usageType": {
          "type": "string",
          "description": "Individual, Joint, Other"
        },
        "password": {
          "type": "string"
        },
        "serviceProvider": {
          "type": "string"
        },
        "serviceProviderName": {
          "type": "string"
        },
        "serviceProviderData": {
          "type": "string"
        },
        "characteristics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "Characteristic"
          }
        }
      }
    },
    "Characteristic": {
      "id": "Characteristic",
      "type": "object",
      "properties": {
        "characteristicId": {
          "type": "string"
        },
        "characteristicName": {
          "type": "string"
        },
        "characteristicDescription": {
          "type": "string"
        },
        "unique": {
          "type": "boolean"
        },
        "valueType": {
          "type": "string"
        },
        "minCardinality": {
          "type": "integer"
        },
        "maxCardinality": {
          "type": "integer"
        },
        "extensible": {
          "type": "boolean"
        },
        "derivationFormula": {
          "type": "string"
        },
        "characteristicSequence": {
          "type": "integer"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "characteristicCategory": {
          "type": "object",
          "$ref": "CharacteristicCategory",
          "required": true
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "CharacteristicValue"
          }
        }
      }
    },
    "CharacteristicCategory": {
      "id": "CharacteristicCategory",
      "type": "object",
      "properties": {
        "characteristicCategoryId": {
          "type": "string"
        },
        "categoryName": {
          "type": "string"
        },
        "categoryDescription": {
          "type": "string"
        }
      }
    },
    "CharacteristicCollection": {
      "id": "CharacteristicCollection",
      "type": "object",
      "properties": {
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "Characteristic"
          }
        }
      }
    },
    "CharacteristicValue": {
      "id": "CharacteristicValue",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "unitOfMeasure": {
          "type": "string"
        },
        "valueType": {
          "type": "string"
        },
        "isDefaultValue": {
          "type": "boolean"
        },
        "valueFrom": {
          "type": "string"
        },
        "valueTo": {
          "type": "string"
        },
        "rangeInterval": {
          "type": "string"
        },
        "valueSequence": {
          "type": "integer"
        },
        "validFor": {
          "$ref": "TimePeriod"
        }
      }
    },
    "UserGroup": {
      "id": "UserGroup",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "validFor": {
          "$ref": "TimePeriod"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "UserSummary"
          }
        },
        "organization": {
          "$ref": "OrganizationSummary"
        }
      }
    },
    "CableModemSummary": {
      "id": "CableModem",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "macAddress": {
          "$ref": "MACAddress"
        },
        "serialNumber": {
          "type": "string"
        },
        "numActiveChannels": {
          "type": "integer"
        }
      }
    },
    "CableModem": {
      "id" : "CableModem",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "$ref": "Link"
        },
        "installedDOCSISVersion": {
          "type": "string"
        },
        "maxChannelsSupported": {
          "type": "integer"
        },
        "numActiveChannels": {
          "type": "integer"
        },
        "usageState": {
          "type": "integer",
          "description": "0: Unknown, 1: Not Installed, 2: Installed, 3: Inactive, 4: Idle, 5: Active, but able to communicate, 6: Busy (Active and unable to communicate)"
        },
        "manufactureDateStamp": {
          "type": "string",
          "format": "date-time"
        },
        "otherIdentifier": {
          "type": "string"
        },
        "powerState": {
          "type": "integer",
          "description": "0: Unknown, 1: Not Applicable, 2: No Power Applied, 3: Full Power Applied, 4: Power Save - Normal, 5: Power Save - Degraded, 6: Power Save - Standby, 7: Power Save - Critical, 8: Power Save - Low Power Mode, 9: Power Save - Unknown, 10: Power Cycle, 11: Power Warning, 12: Power Off"
        },
        "serialNumber": {
          "type": "string"
        },
        "versionNumber": {
          "type": "string"
        },
        "deviceActivationStatus": {
          "type": "string",
          "description": "Activation_Pending, Activated, Activation_Failed"
        },
        "backplaneIndependent": {
          "type": "boolean"
        },
        "backplaneNumber": {
          "type": "integer"
        },
        "configurationOrder": {
          "type": "string"
        },
        "deviceGroupID": {
          "type": "string"
        },
        "isComposite": {
          "type": "boolean"
        },
        "canMixPower": {
          "type": "boolean"
        },
        "hasPowerManagement": {
          "type": "boolean"
        },
        "powerManagementCapabilities": {
          "type": "string"
        },
        "deviceProviderType": {
          "type": "string",
          "description": "CustomerProvided, CompanyProvided"
        },
        "deviceManagementType": {
          "type": "string",
          "description": "CustomerManaged, ProviderManaged"
        },
        "macAddress": {
          "$ref": "MACAddress"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "CableModemChannel"
          }
        },
        "assignedCMTS": {
          "$ref": "CMTSCableModemAssignment"
        },
        "docsisinterface": {
          "$ref": "DOCSISCableInterface"
        },
        "serviceSite": {
          "$ref": "SiteSummary"
        },
        "fiberNode": {
          "$ref": "FiberNode"
        }
      }
    },
    "DOCSISCableInterface": {
      "type": "object",
      "properties": {
        "mtuSupported": {
          "type": "integer"
        },
        "hasDataLink": {
          "type": "boolean"
        },
        "vendorInterfaceNumber": {
          "type": "string"
        },
        "lrStatus": {
          "type": "integer"
        },
        "t3RangingResponseTimeouts": {
          "type": "integer"
        },
        "mtuCurrent": {
          "type": "integer"
        },
        "isInterfaceEnabled": {
          "type": "boolean"
        },
        "networkPath": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "NetworkPath"
          }
        },
        "isOperational": {
          "type": "boolean"
        },
        "correctedCodewordsIn": {
          "type": "integer"
        },
        "customerInterfaceNumber": {
          "type": "string"
        },
        "t4RangingRequestWindowTimeouts": {
          "type": "integer"
        },
        "usageState": {
          "type": "integer"
        },
        "interfaceInitResetCount": {
          "type": "integer"
        },
        "serviceState": {
          "type": "integer"
        },
        "supportsMLPPP": {
          "type": "boolean"
        },
        "badCodewordsIn": {
          "type": "integer"
        },
        "hasCarrierDetect": {
          "type": "boolean"
        },
        "syncLostCount": {
          "type": "integer"
        },
        "goodCodewordsIn": {
          "type": "integer"
        },
        "deviceConfigMethod": {
          "type": "integer"
        }
      }
    },
    "CMTSCableModemAssignment": {
      "id": "CMTSCableModemAssignment",
      "type": "object",
      "properties": {
        "cmStatus": {
          "type": "integer",
          "description": "1 - other than below, 2 - ranging, 3 - ranging aborted, 4 - ranging complete, 5 - IP complete (IP Address DHCP-assigned), 6 - registration complete (aka operational), 7 - access denied, 8 - RESERVED, 9 - registered, BPI initialized"
        },
        "cmPreEqualized": {
          "type": "boolean"
        },
        "cableModem": {
          "$ref": "CableModemSummary"
        },
        "cmts": {
          "$ref": "CMTSSummary"
        }
      }
    },
    "CableModemChannel": {
      "type": "object",
      "properties": {
        "snr": {
          "type": "object",
          "$ref": "Quantity",
          "required": true
        },
        "modulationType": {
          "type": "integer"
        },
        "link": {
          "type": "object",
          "$ref": "Link",
          "required": true
        },
        "warnThresholdPercent": {
          "type": "integer"
        },
        "operationalState": {
          "type": "integer"
        },
        "isPreEqualized": {
          "type": "boolean"
        },
        "overSubscription": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "modulationProfileNumber": {
          "type": "integer"
        },
        "originalMteID": {
          "type": "string"
        },
        "logicalAlarmStatus": {
          "type": "integer"
        },
        "mteAdministrativeState": {
          "type": "integer"
        },
        "bpsAvailable": {
          "type": "integer"
        },
        "mteID": {
          "type": "string"
        },
        "channelWidthHz": {
          "type": "number"
        },
        "modulationChannelType": {
          "type": "integer"
        },
        "additionalInfo": {
          "type": "string"
        },
        "isMTEOperational": {
          "type": "boolean"
        },
        "transmitOffset": {
          "type": "integer"
        },
        "bpsAssigned": {
          "type": "integer"
        },
        "transmitPower": {
          "type": "object",
          "$ref": "Quantity",
          "required": true
        },
        "logicalAlarmReportingEnabled": {
          "type": "boolean"
        },
        "channelFrequencyHz": {
          "type": "number"
        },
        "typeOfMTE": {
          "type": "integer"
        },
        "modulationConstellation": {
          "type": "integer"
        },
        "receivePower": {
          "type": "object",
          "$ref": "Quantity",
          "required": true
        }
      }
    }
  }
}
